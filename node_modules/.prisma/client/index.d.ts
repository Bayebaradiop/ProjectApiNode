
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model ProfilSortie
 * 
 */
export type ProfilSortie = $Result.DefaultSelection<Prisma.$ProfilSortiePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Promo
 * 
 */
export type Promo = $Result.DefaultSelection<Prisma.$PromoPayload>
/**
 * Model PromoFormateurs
 * 
 */
export type PromoFormateurs = $Result.DefaultSelection<Prisma.$PromoFormateursPayload>
/**
 * Model Niveau
 * 
 */
export type Niveau = $Result.DefaultSelection<Prisma.$NiveauPayload>
/**
 * Model Competence
 * 
 */
export type Competence = $Result.DefaultSelection<Prisma.$CompetencePayload>
/**
 * Model CompetenceNiveau
 * 
 */
export type CompetenceNiveau = $Result.DefaultSelection<Prisma.$CompetenceNiveauPayload>
/**
 * Model Referentiel
 * 
 */
export type Referentiel = $Result.DefaultSelection<Prisma.$ReferentielPayload>
/**
 * Model ReferentielCompetence
 * 
 */
export type ReferentielCompetence = $Result.DefaultSelection<Prisma.$ReferentielCompetencePayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profilSortie`: Exposes CRUD operations for the **ProfilSortie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilSorties
    * const profilSorties = await prisma.profilSortie.findMany()
    * ```
    */
  get profilSortie(): Prisma.ProfilSortieDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promo`: Exposes CRUD operations for the **Promo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promos
    * const promos = await prisma.promo.findMany()
    * ```
    */
  get promo(): Prisma.PromoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.promoFormateurs`: Exposes CRUD operations for the **PromoFormateurs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromoFormateurs
    * const promoFormateurs = await prisma.promoFormateurs.findMany()
    * ```
    */
  get promoFormateurs(): Prisma.PromoFormateursDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.niveau`: Exposes CRUD operations for the **Niveau** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Niveaus
    * const niveaus = await prisma.niveau.findMany()
    * ```
    */
  get niveau(): Prisma.NiveauDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.competence`: Exposes CRUD operations for the **Competence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competences
    * const competences = await prisma.competence.findMany()
    * ```
    */
  get competence(): Prisma.CompetenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.competenceNiveau`: Exposes CRUD operations for the **CompetenceNiveau** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompetenceNiveaus
    * const competenceNiveaus = await prisma.competenceNiveau.findMany()
    * ```
    */
  get competenceNiveau(): Prisma.CompetenceNiveauDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referentiel`: Exposes CRUD operations for the **Referentiel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Referentiels
    * const referentiels = await prisma.referentiel.findMany()
    * ```
    */
  get referentiel(): Prisma.ReferentielDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.referentielCompetence`: Exposes CRUD operations for the **ReferentielCompetence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReferentielCompetences
    * const referentielCompetences = await prisma.referentielCompetence.findMany()
    * ```
    */
  get referentielCompetence(): Prisma.ReferentielCompetenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Profile: 'Profile',
    ProfilSortie: 'ProfilSortie',
    User: 'User',
    Promo: 'Promo',
    PromoFormateurs: 'PromoFormateurs',
    Niveau: 'Niveau',
    Competence: 'Competence',
    CompetenceNiveau: 'CompetenceNiveau',
    Referentiel: 'Referentiel',
    ReferentielCompetence: 'ReferentielCompetence',
    Tag: 'Tag'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "profile" | "profilSortie" | "user" | "promo" | "promoFormateurs" | "niveau" | "competence" | "competenceNiveau" | "referentiel" | "referentielCompetence" | "tag"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      ProfilSortie: {
        payload: Prisma.$ProfilSortiePayload<ExtArgs>
        fields: Prisma.ProfilSortieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilSortieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilSortieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          findFirst: {
            args: Prisma.ProfilSortieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilSortieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          findMany: {
            args: Prisma.ProfilSortieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>[]
          }
          create: {
            args: Prisma.ProfilSortieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          createMany: {
            args: Prisma.ProfilSortieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfilSortieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          update: {
            args: Prisma.ProfilSortieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          deleteMany: {
            args: Prisma.ProfilSortieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilSortieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfilSortieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilSortiePayload>
          }
          aggregate: {
            args: Prisma.ProfilSortieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfilSortie>
          }
          groupBy: {
            args: Prisma.ProfilSortieGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilSortieGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilSortieCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilSortieCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Promo: {
        payload: Prisma.$PromoPayload<ExtArgs>
        fields: Prisma.PromoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>
          }
          findFirst: {
            args: Prisma.PromoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>
          }
          findMany: {
            args: Prisma.PromoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>[]
          }
          create: {
            args: Prisma.PromoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>
          }
          createMany: {
            args: Prisma.PromoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PromoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>
          }
          update: {
            args: Prisma.PromoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>
          }
          deleteMany: {
            args: Prisma.PromoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoPayload>
          }
          aggregate: {
            args: Prisma.PromoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromo>
          }
          groupBy: {
            args: Prisma.PromoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromoCountArgs<ExtArgs>
            result: $Utils.Optional<PromoCountAggregateOutputType> | number
          }
        }
      }
      PromoFormateurs: {
        payload: Prisma.$PromoFormateursPayload<ExtArgs>
        fields: Prisma.PromoFormateursFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PromoFormateursFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PromoFormateursFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>
          }
          findFirst: {
            args: Prisma.PromoFormateursFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PromoFormateursFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>
          }
          findMany: {
            args: Prisma.PromoFormateursFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>[]
          }
          create: {
            args: Prisma.PromoFormateursCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>
          }
          createMany: {
            args: Prisma.PromoFormateursCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PromoFormateursDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>
          }
          update: {
            args: Prisma.PromoFormateursUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>
          }
          deleteMany: {
            args: Prisma.PromoFormateursDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PromoFormateursUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PromoFormateursUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PromoFormateursPayload>
          }
          aggregate: {
            args: Prisma.PromoFormateursAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePromoFormateurs>
          }
          groupBy: {
            args: Prisma.PromoFormateursGroupByArgs<ExtArgs>
            result: $Utils.Optional<PromoFormateursGroupByOutputType>[]
          }
          count: {
            args: Prisma.PromoFormateursCountArgs<ExtArgs>
            result: $Utils.Optional<PromoFormateursCountAggregateOutputType> | number
          }
        }
      }
      Niveau: {
        payload: Prisma.$NiveauPayload<ExtArgs>
        fields: Prisma.NiveauFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NiveauFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NiveauFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          findFirst: {
            args: Prisma.NiveauFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NiveauFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          findMany: {
            args: Prisma.NiveauFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>[]
          }
          create: {
            args: Prisma.NiveauCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          createMany: {
            args: Prisma.NiveauCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NiveauDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          update: {
            args: Prisma.NiveauUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          deleteMany: {
            args: Prisma.NiveauDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NiveauUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NiveauUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NiveauPayload>
          }
          aggregate: {
            args: Prisma.NiveauAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNiveau>
          }
          groupBy: {
            args: Prisma.NiveauGroupByArgs<ExtArgs>
            result: $Utils.Optional<NiveauGroupByOutputType>[]
          }
          count: {
            args: Prisma.NiveauCountArgs<ExtArgs>
            result: $Utils.Optional<NiveauCountAggregateOutputType> | number
          }
        }
      }
      Competence: {
        payload: Prisma.$CompetencePayload<ExtArgs>
        fields: Prisma.CompetenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          findFirst: {
            args: Prisma.CompetenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          findMany: {
            args: Prisma.CompetenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>[]
          }
          create: {
            args: Prisma.CompetenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          createMany: {
            args: Prisma.CompetenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CompetenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          update: {
            args: Prisma.CompetenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          deleteMany: {
            args: Prisma.CompetenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          aggregate: {
            args: Prisma.CompetenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetence>
          }
          groupBy: {
            args: Prisma.CompetenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetenceCountArgs<ExtArgs>
            result: $Utils.Optional<CompetenceCountAggregateOutputType> | number
          }
        }
      }
      CompetenceNiveau: {
        payload: Prisma.$CompetenceNiveauPayload<ExtArgs>
        fields: Prisma.CompetenceNiveauFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetenceNiveauFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetenceNiveauFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>
          }
          findFirst: {
            args: Prisma.CompetenceNiveauFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetenceNiveauFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>
          }
          findMany: {
            args: Prisma.CompetenceNiveauFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>[]
          }
          create: {
            args: Prisma.CompetenceNiveauCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>
          }
          createMany: {
            args: Prisma.CompetenceNiveauCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CompetenceNiveauDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>
          }
          update: {
            args: Prisma.CompetenceNiveauUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>
          }
          deleteMany: {
            args: Prisma.CompetenceNiveauDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetenceNiveauUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetenceNiveauUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetenceNiveauPayload>
          }
          aggregate: {
            args: Prisma.CompetenceNiveauAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetenceNiveau>
          }
          groupBy: {
            args: Prisma.CompetenceNiveauGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetenceNiveauGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetenceNiveauCountArgs<ExtArgs>
            result: $Utils.Optional<CompetenceNiveauCountAggregateOutputType> | number
          }
        }
      }
      Referentiel: {
        payload: Prisma.$ReferentielPayload<ExtArgs>
        fields: Prisma.ReferentielFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferentielFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferentielFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          findFirst: {
            args: Prisma.ReferentielFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferentielFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          findMany: {
            args: Prisma.ReferentielFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>[]
          }
          create: {
            args: Prisma.ReferentielCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          createMany: {
            args: Prisma.ReferentielCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReferentielDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          update: {
            args: Prisma.ReferentielUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          deleteMany: {
            args: Prisma.ReferentielDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferentielUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReferentielUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielPayload>
          }
          aggregate: {
            args: Prisma.ReferentielAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferentiel>
          }
          groupBy: {
            args: Prisma.ReferentielGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferentielGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferentielCountArgs<ExtArgs>
            result: $Utils.Optional<ReferentielCountAggregateOutputType> | number
          }
        }
      }
      ReferentielCompetence: {
        payload: Prisma.$ReferentielCompetencePayload<ExtArgs>
        fields: Prisma.ReferentielCompetenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferentielCompetenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferentielCompetenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>
          }
          findFirst: {
            args: Prisma.ReferentielCompetenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferentielCompetenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>
          }
          findMany: {
            args: Prisma.ReferentielCompetenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>[]
          }
          create: {
            args: Prisma.ReferentielCompetenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>
          }
          createMany: {
            args: Prisma.ReferentielCompetenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReferentielCompetenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>
          }
          update: {
            args: Prisma.ReferentielCompetenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>
          }
          deleteMany: {
            args: Prisma.ReferentielCompetenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReferentielCompetenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReferentielCompetenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReferentielCompetencePayload>
          }
          aggregate: {
            args: Prisma.ReferentielCompetenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReferentielCompetence>
          }
          groupBy: {
            args: Prisma.ReferentielCompetenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReferentielCompetenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferentielCompetenceCountArgs<ExtArgs>
            result: $Utils.Optional<ReferentielCompetenceCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    profile?: ProfileOmit
    profilSortie?: ProfilSortieOmit
    user?: UserOmit
    promo?: PromoOmit
    promoFormateurs?: PromoFormateursOmit
    niveau?: NiveauOmit
    competence?: CompetenceOmit
    competenceNiveau?: CompetenceNiveauOmit
    referentiel?: ReferentielOmit
    referentielCompetence?: ReferentielCompetenceOmit
    tag?: TagOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProfileCountOutputType
   */

  export type ProfileCountOutputType = {
    users: number
  }

  export type ProfileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ProfileCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfileCountOutputType
     */
    select?: ProfileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfileCountOutputType without action
   */
  export type ProfileCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ProfilSortieCountOutputType
   */

  export type ProfilSortieCountOutputType = {
    users: number
  }

  export type ProfilSortieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ProfilSortieCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * ProfilSortieCountOutputType without action
   */
  export type ProfilSortieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortieCountOutputType
     */
    select?: ProfilSortieCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfilSortieCountOutputType without action
   */
  export type ProfilSortieCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    promosFormateur: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promosFormateur?: boolean | UserCountOutputTypeCountPromosFormateurArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPromosFormateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromoFormateursWhereInput
  }


  /**
   * Count Type PromoCountOutputType
   */

  export type PromoCountOutputType = {
    formateurs: number
  }

  export type PromoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formateurs?: boolean | PromoCountOutputTypeCountFormateursArgs
  }

  // Custom InputTypes
  /**
   * PromoCountOutputType without action
   */
  export type PromoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoCountOutputType
     */
    select?: PromoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PromoCountOutputType without action
   */
  export type PromoCountOutputTypeCountFormateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromoFormateursWhereInput
  }


  /**
   * Count Type NiveauCountOutputType
   */

  export type NiveauCountOutputType = {
    competences: number
  }

  export type NiveauCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competences?: boolean | NiveauCountOutputTypeCountCompetencesArgs
  }

  // Custom InputTypes
  /**
   * NiveauCountOutputType without action
   */
  export type NiveauCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NiveauCountOutputType
     */
    select?: NiveauCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NiveauCountOutputType without action
   */
  export type NiveauCountOutputTypeCountCompetencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceNiveauWhereInput
  }


  /**
   * Count Type CompetenceCountOutputType
   */

  export type CompetenceCountOutputType = {
    niveaux: number
    referentiels: number
  }

  export type CompetenceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    niveaux?: boolean | CompetenceCountOutputTypeCountNiveauxArgs
    referentiels?: boolean | CompetenceCountOutputTypeCountReferentielsArgs
  }

  // Custom InputTypes
  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceCountOutputType
     */
    select?: CompetenceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeCountNiveauxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceNiveauWhereInput
  }

  /**
   * CompetenceCountOutputType without action
   */
  export type CompetenceCountOutputTypeCountReferentielsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferentielCompetenceWhereInput
  }


  /**
   * Count Type ReferentielCountOutputType
   */

  export type ReferentielCountOutputType = {
    competences: number
    users: number
    promos: number
  }

  export type ReferentielCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competences?: boolean | ReferentielCountOutputTypeCountCompetencesArgs
    users?: boolean | ReferentielCountOutputTypeCountUsersArgs
    promos?: boolean | ReferentielCountOutputTypeCountPromosArgs
  }

  // Custom InputTypes
  /**
   * ReferentielCountOutputType without action
   */
  export type ReferentielCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCountOutputType
     */
    select?: ReferentielCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReferentielCountOutputType without action
   */
  export type ReferentielCountOutputTypeCountCompetencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferentielCompetenceWhereInput
  }

  /**
   * ReferentielCountOutputType without action
   */
  export type ReferentielCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * ReferentielCountOutputType without action
   */
  export type ReferentielCountOutputTypeCountPromosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfileSumAggregateOutputType = {
    id: number | null
  }

  export type ProfileMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _avg?: ProfileAvgAggregateInputType
    _sum?: ProfileSumAggregateInputType
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: number
    nom: string
    _count: ProfileCountAggregateOutputType | null
    _avg: ProfileAvgAggregateOutputType | null
    _sum: ProfileSumAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    users?: boolean | Profile$usersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>



  export type ProfileSelectScalar = {
    id?: boolean
    nom?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Profile$usersArgs<ExtArgs>
    _count?: boolean | ProfileCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Profile$usersArgs<ExtArgs> = {}>(args?: Subset<T, Profile$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'Int'>
    readonly nom: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.users
   */
  export type Profile$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model ProfilSortie
   */

  export type AggregateProfilSortie = {
    _count: ProfilSortieCountAggregateOutputType | null
    _avg: ProfilSortieAvgAggregateOutputType | null
    _sum: ProfilSortieSumAggregateOutputType | null
    _min: ProfilSortieMinAggregateOutputType | null
    _max: ProfilSortieMaxAggregateOutputType | null
  }

  export type ProfilSortieAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfilSortieSumAggregateOutputType = {
    id: number | null
  }

  export type ProfilSortieMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type ProfilSortieMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type ProfilSortieCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type ProfilSortieAvgAggregateInputType = {
    id?: true
  }

  export type ProfilSortieSumAggregateInputType = {
    id?: true
  }

  export type ProfilSortieMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type ProfilSortieMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type ProfilSortieCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type ProfilSortieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilSortie to aggregate.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilSorties
    **/
    _count?: true | ProfilSortieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilSortieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilSortieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilSortieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilSortieMaxAggregateInputType
  }

  export type GetProfilSortieAggregateType<T extends ProfilSortieAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilSortie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilSortie[P]>
      : GetScalarType<T[P], AggregateProfilSortie[P]>
  }




  export type ProfilSortieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilSortieWhereInput
    orderBy?: ProfilSortieOrderByWithAggregationInput | ProfilSortieOrderByWithAggregationInput[]
    by: ProfilSortieScalarFieldEnum[] | ProfilSortieScalarFieldEnum
    having?: ProfilSortieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilSortieCountAggregateInputType | true
    _avg?: ProfilSortieAvgAggregateInputType
    _sum?: ProfilSortieSumAggregateInputType
    _min?: ProfilSortieMinAggregateInputType
    _max?: ProfilSortieMaxAggregateInputType
  }

  export type ProfilSortieGroupByOutputType = {
    id: number
    nom: string
    _count: ProfilSortieCountAggregateOutputType | null
    _avg: ProfilSortieAvgAggregateOutputType | null
    _sum: ProfilSortieSumAggregateOutputType | null
    _min: ProfilSortieMinAggregateOutputType | null
    _max: ProfilSortieMaxAggregateOutputType | null
  }

  type GetProfilSortieGroupByPayload<T extends ProfilSortieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilSortieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilSortieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilSortieGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilSortieGroupByOutputType[P]>
        }
      >
    >


  export type ProfilSortieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    users?: boolean | ProfilSortie$usersArgs<ExtArgs>
    _count?: boolean | ProfilSortieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilSortie"]>



  export type ProfilSortieSelectScalar = {
    id?: boolean
    nom?: boolean
  }

  export type ProfilSortieOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom", ExtArgs["result"]["profilSortie"]>
  export type ProfilSortieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ProfilSortie$usersArgs<ExtArgs>
    _count?: boolean | ProfilSortieCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProfilSortiePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilSortie"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
    }, ExtArgs["result"]["profilSortie"]>
    composites: {}
  }

  type ProfilSortieGetPayload<S extends boolean | null | undefined | ProfilSortieDefaultArgs> = $Result.GetResult<Prisma.$ProfilSortiePayload, S>

  type ProfilSortieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilSortieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilSortieCountAggregateInputType | true
    }

  export interface ProfilSortieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilSortie'], meta: { name: 'ProfilSortie' } }
    /**
     * Find zero or one ProfilSortie that matches the filter.
     * @param {ProfilSortieFindUniqueArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilSortieFindUniqueArgs>(args: SelectSubset<T, ProfilSortieFindUniqueArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfilSortie that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilSortieFindUniqueOrThrowArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilSortieFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilSortieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilSortie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieFindFirstArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilSortieFindFirstArgs>(args?: SelectSubset<T, ProfilSortieFindFirstArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilSortie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieFindFirstOrThrowArgs} args - Arguments to find a ProfilSortie
     * @example
     * // Get one ProfilSortie
     * const profilSortie = await prisma.profilSortie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilSortieFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilSortieFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfilSorties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilSorties
     * const profilSorties = await prisma.profilSortie.findMany()
     * 
     * // Get first 10 ProfilSorties
     * const profilSorties = await prisma.profilSortie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilSortieWithIdOnly = await prisma.profilSortie.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilSortieFindManyArgs>(args?: SelectSubset<T, ProfilSortieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfilSortie.
     * @param {ProfilSortieCreateArgs} args - Arguments to create a ProfilSortie.
     * @example
     * // Create one ProfilSortie
     * const ProfilSortie = await prisma.profilSortie.create({
     *   data: {
     *     // ... data to create a ProfilSortie
     *   }
     * })
     * 
     */
    create<T extends ProfilSortieCreateArgs>(args: SelectSubset<T, ProfilSortieCreateArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfilSorties.
     * @param {ProfilSortieCreateManyArgs} args - Arguments to create many ProfilSorties.
     * @example
     * // Create many ProfilSorties
     * const profilSortie = await prisma.profilSortie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilSortieCreateManyArgs>(args?: SelectSubset<T, ProfilSortieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfilSortie.
     * @param {ProfilSortieDeleteArgs} args - Arguments to delete one ProfilSortie.
     * @example
     * // Delete one ProfilSortie
     * const ProfilSortie = await prisma.profilSortie.delete({
     *   where: {
     *     // ... filter to delete one ProfilSortie
     *   }
     * })
     * 
     */
    delete<T extends ProfilSortieDeleteArgs>(args: SelectSubset<T, ProfilSortieDeleteArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfilSortie.
     * @param {ProfilSortieUpdateArgs} args - Arguments to update one ProfilSortie.
     * @example
     * // Update one ProfilSortie
     * const profilSortie = await prisma.profilSortie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilSortieUpdateArgs>(args: SelectSubset<T, ProfilSortieUpdateArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfilSorties.
     * @param {ProfilSortieDeleteManyArgs} args - Arguments to filter ProfilSorties to delete.
     * @example
     * // Delete a few ProfilSorties
     * const { count } = await prisma.profilSortie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilSortieDeleteManyArgs>(args?: SelectSubset<T, ProfilSortieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilSorties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilSorties
     * const profilSortie = await prisma.profilSortie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilSortieUpdateManyArgs>(args: SelectSubset<T, ProfilSortieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfilSortie.
     * @param {ProfilSortieUpsertArgs} args - Arguments to update or create a ProfilSortie.
     * @example
     * // Update or create a ProfilSortie
     * const profilSortie = await prisma.profilSortie.upsert({
     *   create: {
     *     // ... data to create a ProfilSortie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilSortie we want to update
     *   }
     * })
     */
    upsert<T extends ProfilSortieUpsertArgs>(args: SelectSubset<T, ProfilSortieUpsertArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfilSorties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieCountArgs} args - Arguments to filter ProfilSorties to count.
     * @example
     * // Count the number of ProfilSorties
     * const count = await prisma.profilSortie.count({
     *   where: {
     *     // ... the filter for the ProfilSorties we want to count
     *   }
     * })
    **/
    count<T extends ProfilSortieCountArgs>(
      args?: Subset<T, ProfilSortieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilSortieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilSortie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilSortieAggregateArgs>(args: Subset<T, ProfilSortieAggregateArgs>): Prisma.PrismaPromise<GetProfilSortieAggregateType<T>>

    /**
     * Group by ProfilSortie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilSortieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilSortieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilSortieGroupByArgs['orderBy'] }
        : { orderBy?: ProfilSortieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilSortieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilSortieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilSortie model
   */
  readonly fields: ProfilSortieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilSortie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilSortieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends ProfilSortie$usersArgs<ExtArgs> = {}>(args?: Subset<T, ProfilSortie$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfilSortie model
   */
  interface ProfilSortieFieldRefs {
    readonly id: FieldRef<"ProfilSortie", 'Int'>
    readonly nom: FieldRef<"ProfilSortie", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProfilSortie findUnique
   */
  export type ProfilSortieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie findUniqueOrThrow
   */
  export type ProfilSortieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie findFirst
   */
  export type ProfilSortieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilSorties.
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilSorties.
     */
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * ProfilSortie findFirstOrThrow
   */
  export type ProfilSortieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSortie to fetch.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilSorties.
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilSorties.
     */
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * ProfilSortie findMany
   */
  export type ProfilSortieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter, which ProfilSorties to fetch.
     */
    where?: ProfilSortieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilSorties to fetch.
     */
    orderBy?: ProfilSortieOrderByWithRelationInput | ProfilSortieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilSorties.
     */
    cursor?: ProfilSortieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilSorties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilSorties.
     */
    skip?: number
    distinct?: ProfilSortieScalarFieldEnum | ProfilSortieScalarFieldEnum[]
  }

  /**
   * ProfilSortie create
   */
  export type ProfilSortieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilSortie.
     */
    data: XOR<ProfilSortieCreateInput, ProfilSortieUncheckedCreateInput>
  }

  /**
   * ProfilSortie createMany
   */
  export type ProfilSortieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilSorties.
     */
    data: ProfilSortieCreateManyInput | ProfilSortieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfilSortie update
   */
  export type ProfilSortieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilSortie.
     */
    data: XOR<ProfilSortieUpdateInput, ProfilSortieUncheckedUpdateInput>
    /**
     * Choose, which ProfilSortie to update.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie updateMany
   */
  export type ProfilSortieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilSorties.
     */
    data: XOR<ProfilSortieUpdateManyMutationInput, ProfilSortieUncheckedUpdateManyInput>
    /**
     * Filter which ProfilSorties to update
     */
    where?: ProfilSortieWhereInput
    /**
     * Limit how many ProfilSorties to update.
     */
    limit?: number
  }

  /**
   * ProfilSortie upsert
   */
  export type ProfilSortieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilSortie to update in case it exists.
     */
    where: ProfilSortieWhereUniqueInput
    /**
     * In case the ProfilSortie found by the `where` argument doesn't exist, create a new ProfilSortie with this data.
     */
    create: XOR<ProfilSortieCreateInput, ProfilSortieUncheckedCreateInput>
    /**
     * In case the ProfilSortie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilSortieUpdateInput, ProfilSortieUncheckedUpdateInput>
  }

  /**
   * ProfilSortie delete
   */
  export type ProfilSortieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    /**
     * Filter which ProfilSortie to delete.
     */
    where: ProfilSortieWhereUniqueInput
  }

  /**
   * ProfilSortie deleteMany
   */
  export type ProfilSortieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilSorties to delete
     */
    where?: ProfilSortieWhereInput
    /**
     * Limit how many ProfilSorties to delete.
     */
    limit?: number
  }

  /**
   * ProfilSortie.users
   */
  export type ProfilSortie$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * ProfilSortie without action
   */
  export type ProfilSortieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    profileId: number | null
    profilSortieId: number | null
    referentielId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    profileId: number | null
    profilSortieId: number | null
    referentielId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    profileId: number | null
    profilSortieId: number | null
    referentielId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    profileId: number | null
    profilSortieId: number | null
    referentielId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    profileId: number
    profilSortieId: number
    referentielId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    profileId?: true
    profilSortieId?: true
    referentielId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    profileId?: true
    profilSortieId?: true
    referentielId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    profileId?: true
    profilSortieId?: true
    referentielId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    profileId?: true
    profilSortieId?: true
    referentielId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    profileId?: true
    profilSortieId?: true
    referentielId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    profileId: number
    profilSortieId: number | null
    referentielId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    profileId?: boolean
    profilSortieId?: boolean
    referentielId?: boolean
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    profilSortie?: boolean | User$profilSortieArgs<ExtArgs>
    referentiel?: boolean | User$referentielArgs<ExtArgs>
    promosFormateur?: boolean | User$promosFormateurArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    profileId?: boolean
    profilSortieId?: boolean
    referentielId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "password" | "profileId" | "profilSortieId" | "referentielId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | ProfileDefaultArgs<ExtArgs>
    profilSortie?: boolean | User$profilSortieArgs<ExtArgs>
    referentiel?: boolean | User$referentielArgs<ExtArgs>
    promosFormateur?: boolean | User$promosFormateurArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$ProfilePayload<ExtArgs>
      profilSortie: Prisma.$ProfilSortiePayload<ExtArgs> | null
      referentiel: Prisma.$ReferentielPayload<ExtArgs> | null
      promosFormateur: Prisma.$PromoFormateursPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      email: string
      password: string
      profileId: number
      profilSortieId: number | null
      referentielId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends ProfileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfileDefaultArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profilSortie<T extends User$profilSortieArgs<ExtArgs> = {}>(args?: Subset<T, User$profilSortieArgs<ExtArgs>>): Prisma__ProfilSortieClient<$Result.GetResult<Prisma.$ProfilSortiePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    referentiel<T extends User$referentielArgs<ExtArgs> = {}>(args?: Subset<T, User$referentielArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    promosFormateur<T extends User$promosFormateurArgs<ExtArgs> = {}>(args?: Subset<T, User$promosFormateurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly profileId: FieldRef<"User", 'Int'>
    readonly profilSortieId: FieldRef<"User", 'Int'>
    readonly referentielId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profilSortie
   */
  export type User$profilSortieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilSortie
     */
    select?: ProfilSortieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilSortie
     */
    omit?: ProfilSortieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilSortieInclude<ExtArgs> | null
    where?: ProfilSortieWhereInput
  }

  /**
   * User.referentiel
   */
  export type User$referentielArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    where?: ReferentielWhereInput
  }

  /**
   * User.promosFormateur
   */
  export type User$promosFormateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    where?: PromoFormateursWhereInput
    orderBy?: PromoFormateursOrderByWithRelationInput | PromoFormateursOrderByWithRelationInput[]
    cursor?: PromoFormateursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromoFormateursScalarFieldEnum | PromoFormateursScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Promo
   */

  export type AggregatePromo = {
    _count: PromoCountAggregateOutputType | null
    _avg: PromoAvgAggregateOutputType | null
    _sum: PromoSumAggregateOutputType | null
    _min: PromoMinAggregateOutputType | null
    _max: PromoMaxAggregateOutputType | null
  }

  export type PromoAvgAggregateOutputType = {
    id: number | null
    referentielId: number | null
  }

  export type PromoSumAggregateOutputType = {
    id: number | null
    referentielId: number | null
  }

  export type PromoMinAggregateOutputType = {
    id: number | null
    nom: string | null
    dateDebut: Date | null
    dateFin: Date | null
    referentielId: number | null
  }

  export type PromoMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    dateDebut: Date | null
    dateFin: Date | null
    referentielId: number | null
  }

  export type PromoCountAggregateOutputType = {
    id: number
    nom: number
    dateDebut: number
    dateFin: number
    referentielId: number
    _all: number
  }


  export type PromoAvgAggregateInputType = {
    id?: true
    referentielId?: true
  }

  export type PromoSumAggregateInputType = {
    id?: true
    referentielId?: true
  }

  export type PromoMinAggregateInputType = {
    id?: true
    nom?: true
    dateDebut?: true
    dateFin?: true
    referentielId?: true
  }

  export type PromoMaxAggregateInputType = {
    id?: true
    nom?: true
    dateDebut?: true
    dateFin?: true
    referentielId?: true
  }

  export type PromoCountAggregateInputType = {
    id?: true
    nom?: true
    dateDebut?: true
    dateFin?: true
    referentielId?: true
    _all?: true
  }

  export type PromoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promo to aggregate.
     */
    where?: PromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promos to fetch.
     */
    orderBy?: PromoOrderByWithRelationInput | PromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Promos
    **/
    _count?: true | PromoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromoMaxAggregateInputType
  }

  export type GetPromoAggregateType<T extends PromoAggregateArgs> = {
        [P in keyof T & keyof AggregatePromo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromo[P]>
      : GetScalarType<T[P], AggregatePromo[P]>
  }




  export type PromoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromoWhereInput
    orderBy?: PromoOrderByWithAggregationInput | PromoOrderByWithAggregationInput[]
    by: PromoScalarFieldEnum[] | PromoScalarFieldEnum
    having?: PromoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromoCountAggregateInputType | true
    _avg?: PromoAvgAggregateInputType
    _sum?: PromoSumAggregateInputType
    _min?: PromoMinAggregateInputType
    _max?: PromoMaxAggregateInputType
  }

  export type PromoGroupByOutputType = {
    id: number
    nom: string
    dateDebut: Date
    dateFin: Date
    referentielId: number | null
    _count: PromoCountAggregateOutputType | null
    _avg: PromoAvgAggregateOutputType | null
    _sum: PromoSumAggregateOutputType | null
    _min: PromoMinAggregateOutputType | null
    _max: PromoMaxAggregateOutputType | null
  }

  type GetPromoGroupByPayload<T extends PromoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromoGroupByOutputType[P]>
            : GetScalarType<T[P], PromoGroupByOutputType[P]>
        }
      >
    >


  export type PromoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    referentielId?: boolean
    referentiel?: boolean | Promo$referentielArgs<ExtArgs>
    formateurs?: boolean | Promo$formateursArgs<ExtArgs>
    _count?: boolean | PromoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promo"]>



  export type PromoSelectScalar = {
    id?: boolean
    nom?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    referentielId?: boolean
  }

  export type PromoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "dateDebut" | "dateFin" | "referentielId", ExtArgs["result"]["promo"]>
  export type PromoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiel?: boolean | Promo$referentielArgs<ExtArgs>
    formateurs?: boolean | Promo$formateursArgs<ExtArgs>
    _count?: boolean | PromoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PromoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Promo"
    objects: {
      referentiel: Prisma.$ReferentielPayload<ExtArgs> | null
      formateurs: Prisma.$PromoFormateursPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      dateDebut: Date
      dateFin: Date
      referentielId: number | null
    }, ExtArgs["result"]["promo"]>
    composites: {}
  }

  type PromoGetPayload<S extends boolean | null | undefined | PromoDefaultArgs> = $Result.GetResult<Prisma.$PromoPayload, S>

  type PromoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromoCountAggregateInputType | true
    }

  export interface PromoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Promo'], meta: { name: 'Promo' } }
    /**
     * Find zero or one Promo that matches the filter.
     * @param {PromoFindUniqueArgs} args - Arguments to find a Promo
     * @example
     * // Get one Promo
     * const promo = await prisma.promo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromoFindUniqueArgs>(args: SelectSubset<T, PromoFindUniqueArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Promo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromoFindUniqueOrThrowArgs} args - Arguments to find a Promo
     * @example
     * // Get one Promo
     * const promo = await prisma.promo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromoFindUniqueOrThrowArgs>(args: SelectSubset<T, PromoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFindFirstArgs} args - Arguments to find a Promo
     * @example
     * // Get one Promo
     * const promo = await prisma.promo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromoFindFirstArgs>(args?: SelectSubset<T, PromoFindFirstArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Promo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFindFirstOrThrowArgs} args - Arguments to find a Promo
     * @example
     * // Get one Promo
     * const promo = await prisma.promo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromoFindFirstOrThrowArgs>(args?: SelectSubset<T, PromoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Promos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promos
     * const promos = await prisma.promo.findMany()
     * 
     * // Get first 10 Promos
     * const promos = await prisma.promo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promoWithIdOnly = await prisma.promo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PromoFindManyArgs>(args?: SelectSubset<T, PromoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Promo.
     * @param {PromoCreateArgs} args - Arguments to create a Promo.
     * @example
     * // Create one Promo
     * const Promo = await prisma.promo.create({
     *   data: {
     *     // ... data to create a Promo
     *   }
     * })
     * 
     */
    create<T extends PromoCreateArgs>(args: SelectSubset<T, PromoCreateArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Promos.
     * @param {PromoCreateManyArgs} args - Arguments to create many Promos.
     * @example
     * // Create many Promos
     * const promo = await prisma.promo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromoCreateManyArgs>(args?: SelectSubset<T, PromoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Promo.
     * @param {PromoDeleteArgs} args - Arguments to delete one Promo.
     * @example
     * // Delete one Promo
     * const Promo = await prisma.promo.delete({
     *   where: {
     *     // ... filter to delete one Promo
     *   }
     * })
     * 
     */
    delete<T extends PromoDeleteArgs>(args: SelectSubset<T, PromoDeleteArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Promo.
     * @param {PromoUpdateArgs} args - Arguments to update one Promo.
     * @example
     * // Update one Promo
     * const promo = await prisma.promo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromoUpdateArgs>(args: SelectSubset<T, PromoUpdateArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Promos.
     * @param {PromoDeleteManyArgs} args - Arguments to filter Promos to delete.
     * @example
     * // Delete a few Promos
     * const { count } = await prisma.promo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromoDeleteManyArgs>(args?: SelectSubset<T, PromoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promos
     * const promo = await prisma.promo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromoUpdateManyArgs>(args: SelectSubset<T, PromoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Promo.
     * @param {PromoUpsertArgs} args - Arguments to update or create a Promo.
     * @example
     * // Update or create a Promo
     * const promo = await prisma.promo.upsert({
     *   create: {
     *     // ... data to create a Promo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promo we want to update
     *   }
     * })
     */
    upsert<T extends PromoUpsertArgs>(args: SelectSubset<T, PromoUpsertArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Promos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoCountArgs} args - Arguments to filter Promos to count.
     * @example
     * // Count the number of Promos
     * const count = await prisma.promo.count({
     *   where: {
     *     // ... the filter for the Promos we want to count
     *   }
     * })
    **/
    count<T extends PromoCountArgs>(
      args?: Subset<T, PromoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromoAggregateArgs>(args: Subset<T, PromoAggregateArgs>): Prisma.PrismaPromise<GetPromoAggregateType<T>>

    /**
     * Group by Promo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromoGroupByArgs['orderBy'] }
        : { orderBy?: PromoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Promo model
   */
  readonly fields: PromoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Promo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referentiel<T extends Promo$referentielArgs<ExtArgs> = {}>(args?: Subset<T, Promo$referentielArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    formateurs<T extends Promo$formateursArgs<ExtArgs> = {}>(args?: Subset<T, Promo$formateursArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Promo model
   */
  interface PromoFieldRefs {
    readonly id: FieldRef<"Promo", 'Int'>
    readonly nom: FieldRef<"Promo", 'String'>
    readonly dateDebut: FieldRef<"Promo", 'DateTime'>
    readonly dateFin: FieldRef<"Promo", 'DateTime'>
    readonly referentielId: FieldRef<"Promo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Promo findUnique
   */
  export type PromoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * Filter, which Promo to fetch.
     */
    where: PromoWhereUniqueInput
  }

  /**
   * Promo findUniqueOrThrow
   */
  export type PromoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * Filter, which Promo to fetch.
     */
    where: PromoWhereUniqueInput
  }

  /**
   * Promo findFirst
   */
  export type PromoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * Filter, which Promo to fetch.
     */
    where?: PromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promos to fetch.
     */
    orderBy?: PromoOrderByWithRelationInput | PromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promos.
     */
    cursor?: PromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promos.
     */
    distinct?: PromoScalarFieldEnum | PromoScalarFieldEnum[]
  }

  /**
   * Promo findFirstOrThrow
   */
  export type PromoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * Filter, which Promo to fetch.
     */
    where?: PromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promos to fetch.
     */
    orderBy?: PromoOrderByWithRelationInput | PromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promos.
     */
    cursor?: PromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promos.
     */
    distinct?: PromoScalarFieldEnum | PromoScalarFieldEnum[]
  }

  /**
   * Promo findMany
   */
  export type PromoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * Filter, which Promos to fetch.
     */
    where?: PromoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promos to fetch.
     */
    orderBy?: PromoOrderByWithRelationInput | PromoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Promos.
     */
    cursor?: PromoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promos.
     */
    skip?: number
    distinct?: PromoScalarFieldEnum | PromoScalarFieldEnum[]
  }

  /**
   * Promo create
   */
  export type PromoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * The data needed to create a Promo.
     */
    data: XOR<PromoCreateInput, PromoUncheckedCreateInput>
  }

  /**
   * Promo createMany
   */
  export type PromoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Promos.
     */
    data: PromoCreateManyInput | PromoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Promo update
   */
  export type PromoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * The data needed to update a Promo.
     */
    data: XOR<PromoUpdateInput, PromoUncheckedUpdateInput>
    /**
     * Choose, which Promo to update.
     */
    where: PromoWhereUniqueInput
  }

  /**
   * Promo updateMany
   */
  export type PromoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Promos.
     */
    data: XOR<PromoUpdateManyMutationInput, PromoUncheckedUpdateManyInput>
    /**
     * Filter which Promos to update
     */
    where?: PromoWhereInput
    /**
     * Limit how many Promos to update.
     */
    limit?: number
  }

  /**
   * Promo upsert
   */
  export type PromoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * The filter to search for the Promo to update in case it exists.
     */
    where: PromoWhereUniqueInput
    /**
     * In case the Promo found by the `where` argument doesn't exist, create a new Promo with this data.
     */
    create: XOR<PromoCreateInput, PromoUncheckedCreateInput>
    /**
     * In case the Promo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromoUpdateInput, PromoUncheckedUpdateInput>
  }

  /**
   * Promo delete
   */
  export type PromoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    /**
     * Filter which Promo to delete.
     */
    where: PromoWhereUniqueInput
  }

  /**
   * Promo deleteMany
   */
  export type PromoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Promos to delete
     */
    where?: PromoWhereInput
    /**
     * Limit how many Promos to delete.
     */
    limit?: number
  }

  /**
   * Promo.referentiel
   */
  export type Promo$referentielArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    where?: ReferentielWhereInput
  }

  /**
   * Promo.formateurs
   */
  export type Promo$formateursArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    where?: PromoFormateursWhereInput
    orderBy?: PromoFormateursOrderByWithRelationInput | PromoFormateursOrderByWithRelationInput[]
    cursor?: PromoFormateursWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromoFormateursScalarFieldEnum | PromoFormateursScalarFieldEnum[]
  }

  /**
   * Promo without action
   */
  export type PromoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
  }


  /**
   * Model PromoFormateurs
   */

  export type AggregatePromoFormateurs = {
    _count: PromoFormateursCountAggregateOutputType | null
    _avg: PromoFormateursAvgAggregateOutputType | null
    _sum: PromoFormateursSumAggregateOutputType | null
    _min: PromoFormateursMinAggregateOutputType | null
    _max: PromoFormateursMaxAggregateOutputType | null
  }

  export type PromoFormateursAvgAggregateOutputType = {
    promoId: number | null
    userId: number | null
  }

  export type PromoFormateursSumAggregateOutputType = {
    promoId: number | null
    userId: number | null
  }

  export type PromoFormateursMinAggregateOutputType = {
    promoId: number | null
    userId: number | null
  }

  export type PromoFormateursMaxAggregateOutputType = {
    promoId: number | null
    userId: number | null
  }

  export type PromoFormateursCountAggregateOutputType = {
    promoId: number
    userId: number
    _all: number
  }


  export type PromoFormateursAvgAggregateInputType = {
    promoId?: true
    userId?: true
  }

  export type PromoFormateursSumAggregateInputType = {
    promoId?: true
    userId?: true
  }

  export type PromoFormateursMinAggregateInputType = {
    promoId?: true
    userId?: true
  }

  export type PromoFormateursMaxAggregateInputType = {
    promoId?: true
    userId?: true
  }

  export type PromoFormateursCountAggregateInputType = {
    promoId?: true
    userId?: true
    _all?: true
  }

  export type PromoFormateursAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromoFormateurs to aggregate.
     */
    where?: PromoFormateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoFormateurs to fetch.
     */
    orderBy?: PromoFormateursOrderByWithRelationInput | PromoFormateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PromoFormateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoFormateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoFormateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromoFormateurs
    **/
    _count?: true | PromoFormateursCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromoFormateursAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromoFormateursSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromoFormateursMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromoFormateursMaxAggregateInputType
  }

  export type GetPromoFormateursAggregateType<T extends PromoFormateursAggregateArgs> = {
        [P in keyof T & keyof AggregatePromoFormateurs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromoFormateurs[P]>
      : GetScalarType<T[P], AggregatePromoFormateurs[P]>
  }




  export type PromoFormateursGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PromoFormateursWhereInput
    orderBy?: PromoFormateursOrderByWithAggregationInput | PromoFormateursOrderByWithAggregationInput[]
    by: PromoFormateursScalarFieldEnum[] | PromoFormateursScalarFieldEnum
    having?: PromoFormateursScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromoFormateursCountAggregateInputType | true
    _avg?: PromoFormateursAvgAggregateInputType
    _sum?: PromoFormateursSumAggregateInputType
    _min?: PromoFormateursMinAggregateInputType
    _max?: PromoFormateursMaxAggregateInputType
  }

  export type PromoFormateursGroupByOutputType = {
    promoId: number
    userId: number
    _count: PromoFormateursCountAggregateOutputType | null
    _avg: PromoFormateursAvgAggregateOutputType | null
    _sum: PromoFormateursSumAggregateOutputType | null
    _min: PromoFormateursMinAggregateOutputType | null
    _max: PromoFormateursMaxAggregateOutputType | null
  }

  type GetPromoFormateursGroupByPayload<T extends PromoFormateursGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PromoFormateursGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromoFormateursGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromoFormateursGroupByOutputType[P]>
            : GetScalarType<T[P], PromoFormateursGroupByOutputType[P]>
        }
      >
    >


  export type PromoFormateursSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    promoId?: boolean
    userId?: boolean
    promo?: boolean | PromoDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["promoFormateurs"]>



  export type PromoFormateursSelectScalar = {
    promoId?: boolean
    userId?: boolean
  }

  export type PromoFormateursOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"promoId" | "userId", ExtArgs["result"]["promoFormateurs"]>
  export type PromoFormateursInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    promo?: boolean | PromoDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PromoFormateursPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PromoFormateurs"
    objects: {
      promo: Prisma.$PromoPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      promoId: number
      userId: number
    }, ExtArgs["result"]["promoFormateurs"]>
    composites: {}
  }

  type PromoFormateursGetPayload<S extends boolean | null | undefined | PromoFormateursDefaultArgs> = $Result.GetResult<Prisma.$PromoFormateursPayload, S>

  type PromoFormateursCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PromoFormateursFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PromoFormateursCountAggregateInputType | true
    }

  export interface PromoFormateursDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PromoFormateurs'], meta: { name: 'PromoFormateurs' } }
    /**
     * Find zero or one PromoFormateurs that matches the filter.
     * @param {PromoFormateursFindUniqueArgs} args - Arguments to find a PromoFormateurs
     * @example
     * // Get one PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PromoFormateursFindUniqueArgs>(args: SelectSubset<T, PromoFormateursFindUniqueArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PromoFormateurs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PromoFormateursFindUniqueOrThrowArgs} args - Arguments to find a PromoFormateurs
     * @example
     * // Get one PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PromoFormateursFindUniqueOrThrowArgs>(args: SelectSubset<T, PromoFormateursFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromoFormateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursFindFirstArgs} args - Arguments to find a PromoFormateurs
     * @example
     * // Get one PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PromoFormateursFindFirstArgs>(args?: SelectSubset<T, PromoFormateursFindFirstArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PromoFormateurs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursFindFirstOrThrowArgs} args - Arguments to find a PromoFormateurs
     * @example
     * // Get one PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PromoFormateursFindFirstOrThrowArgs>(args?: SelectSubset<T, PromoFormateursFindFirstOrThrowArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PromoFormateurs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.findMany()
     * 
     * // Get first 10 PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.findMany({ take: 10 })
     * 
     * // Only select the `promoId`
     * const promoFormateursWithPromoIdOnly = await prisma.promoFormateurs.findMany({ select: { promoId: true } })
     * 
     */
    findMany<T extends PromoFormateursFindManyArgs>(args?: SelectSubset<T, PromoFormateursFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PromoFormateurs.
     * @param {PromoFormateursCreateArgs} args - Arguments to create a PromoFormateurs.
     * @example
     * // Create one PromoFormateurs
     * const PromoFormateurs = await prisma.promoFormateurs.create({
     *   data: {
     *     // ... data to create a PromoFormateurs
     *   }
     * })
     * 
     */
    create<T extends PromoFormateursCreateArgs>(args: SelectSubset<T, PromoFormateursCreateArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PromoFormateurs.
     * @param {PromoFormateursCreateManyArgs} args - Arguments to create many PromoFormateurs.
     * @example
     * // Create many PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PromoFormateursCreateManyArgs>(args?: SelectSubset<T, PromoFormateursCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PromoFormateurs.
     * @param {PromoFormateursDeleteArgs} args - Arguments to delete one PromoFormateurs.
     * @example
     * // Delete one PromoFormateurs
     * const PromoFormateurs = await prisma.promoFormateurs.delete({
     *   where: {
     *     // ... filter to delete one PromoFormateurs
     *   }
     * })
     * 
     */
    delete<T extends PromoFormateursDeleteArgs>(args: SelectSubset<T, PromoFormateursDeleteArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PromoFormateurs.
     * @param {PromoFormateursUpdateArgs} args - Arguments to update one PromoFormateurs.
     * @example
     * // Update one PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PromoFormateursUpdateArgs>(args: SelectSubset<T, PromoFormateursUpdateArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PromoFormateurs.
     * @param {PromoFormateursDeleteManyArgs} args - Arguments to filter PromoFormateurs to delete.
     * @example
     * // Delete a few PromoFormateurs
     * const { count } = await prisma.promoFormateurs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PromoFormateursDeleteManyArgs>(args?: SelectSubset<T, PromoFormateursDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromoFormateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PromoFormateursUpdateManyArgs>(args: SelectSubset<T, PromoFormateursUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PromoFormateurs.
     * @param {PromoFormateursUpsertArgs} args - Arguments to update or create a PromoFormateurs.
     * @example
     * // Update or create a PromoFormateurs
     * const promoFormateurs = await prisma.promoFormateurs.upsert({
     *   create: {
     *     // ... data to create a PromoFormateurs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromoFormateurs we want to update
     *   }
     * })
     */
    upsert<T extends PromoFormateursUpsertArgs>(args: SelectSubset<T, PromoFormateursUpsertArgs<ExtArgs>>): Prisma__PromoFormateursClient<$Result.GetResult<Prisma.$PromoFormateursPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PromoFormateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursCountArgs} args - Arguments to filter PromoFormateurs to count.
     * @example
     * // Count the number of PromoFormateurs
     * const count = await prisma.promoFormateurs.count({
     *   where: {
     *     // ... the filter for the PromoFormateurs we want to count
     *   }
     * })
    **/
    count<T extends PromoFormateursCountArgs>(
      args?: Subset<T, PromoFormateursCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromoFormateursCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromoFormateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromoFormateursAggregateArgs>(args: Subset<T, PromoFormateursAggregateArgs>): Prisma.PrismaPromise<GetPromoFormateursAggregateType<T>>

    /**
     * Group by PromoFormateurs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromoFormateursGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromoFormateursGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromoFormateursGroupByArgs['orderBy'] }
        : { orderBy?: PromoFormateursGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromoFormateursGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromoFormateursGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PromoFormateurs model
   */
  readonly fields: PromoFormateursFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PromoFormateurs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PromoFormateursClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    promo<T extends PromoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PromoDefaultArgs<ExtArgs>>): Prisma__PromoClient<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PromoFormateurs model
   */
  interface PromoFormateursFieldRefs {
    readonly promoId: FieldRef<"PromoFormateurs", 'Int'>
    readonly userId: FieldRef<"PromoFormateurs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PromoFormateurs findUnique
   */
  export type PromoFormateursFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * Filter, which PromoFormateurs to fetch.
     */
    where: PromoFormateursWhereUniqueInput
  }

  /**
   * PromoFormateurs findUniqueOrThrow
   */
  export type PromoFormateursFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * Filter, which PromoFormateurs to fetch.
     */
    where: PromoFormateursWhereUniqueInput
  }

  /**
   * PromoFormateurs findFirst
   */
  export type PromoFormateursFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * Filter, which PromoFormateurs to fetch.
     */
    where?: PromoFormateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoFormateurs to fetch.
     */
    orderBy?: PromoFormateursOrderByWithRelationInput | PromoFormateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromoFormateurs.
     */
    cursor?: PromoFormateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoFormateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoFormateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromoFormateurs.
     */
    distinct?: PromoFormateursScalarFieldEnum | PromoFormateursScalarFieldEnum[]
  }

  /**
   * PromoFormateurs findFirstOrThrow
   */
  export type PromoFormateursFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * Filter, which PromoFormateurs to fetch.
     */
    where?: PromoFormateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoFormateurs to fetch.
     */
    orderBy?: PromoFormateursOrderByWithRelationInput | PromoFormateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromoFormateurs.
     */
    cursor?: PromoFormateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoFormateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoFormateurs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromoFormateurs.
     */
    distinct?: PromoFormateursScalarFieldEnum | PromoFormateursScalarFieldEnum[]
  }

  /**
   * PromoFormateurs findMany
   */
  export type PromoFormateursFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * Filter, which PromoFormateurs to fetch.
     */
    where?: PromoFormateursWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromoFormateurs to fetch.
     */
    orderBy?: PromoFormateursOrderByWithRelationInput | PromoFormateursOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromoFormateurs.
     */
    cursor?: PromoFormateursWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromoFormateurs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromoFormateurs.
     */
    skip?: number
    distinct?: PromoFormateursScalarFieldEnum | PromoFormateursScalarFieldEnum[]
  }

  /**
   * PromoFormateurs create
   */
  export type PromoFormateursCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * The data needed to create a PromoFormateurs.
     */
    data: XOR<PromoFormateursCreateInput, PromoFormateursUncheckedCreateInput>
  }

  /**
   * PromoFormateurs createMany
   */
  export type PromoFormateursCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PromoFormateurs.
     */
    data: PromoFormateursCreateManyInput | PromoFormateursCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PromoFormateurs update
   */
  export type PromoFormateursUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * The data needed to update a PromoFormateurs.
     */
    data: XOR<PromoFormateursUpdateInput, PromoFormateursUncheckedUpdateInput>
    /**
     * Choose, which PromoFormateurs to update.
     */
    where: PromoFormateursWhereUniqueInput
  }

  /**
   * PromoFormateurs updateMany
   */
  export type PromoFormateursUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PromoFormateurs.
     */
    data: XOR<PromoFormateursUpdateManyMutationInput, PromoFormateursUncheckedUpdateManyInput>
    /**
     * Filter which PromoFormateurs to update
     */
    where?: PromoFormateursWhereInput
    /**
     * Limit how many PromoFormateurs to update.
     */
    limit?: number
  }

  /**
   * PromoFormateurs upsert
   */
  export type PromoFormateursUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * The filter to search for the PromoFormateurs to update in case it exists.
     */
    where: PromoFormateursWhereUniqueInput
    /**
     * In case the PromoFormateurs found by the `where` argument doesn't exist, create a new PromoFormateurs with this data.
     */
    create: XOR<PromoFormateursCreateInput, PromoFormateursUncheckedCreateInput>
    /**
     * In case the PromoFormateurs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PromoFormateursUpdateInput, PromoFormateursUncheckedUpdateInput>
  }

  /**
   * PromoFormateurs delete
   */
  export type PromoFormateursDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
    /**
     * Filter which PromoFormateurs to delete.
     */
    where: PromoFormateursWhereUniqueInput
  }

  /**
   * PromoFormateurs deleteMany
   */
  export type PromoFormateursDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PromoFormateurs to delete
     */
    where?: PromoFormateursWhereInput
    /**
     * Limit how many PromoFormateurs to delete.
     */
    limit?: number
  }

  /**
   * PromoFormateurs without action
   */
  export type PromoFormateursDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PromoFormateurs
     */
    select?: PromoFormateursSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PromoFormateurs
     */
    omit?: PromoFormateursOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoFormateursInclude<ExtArgs> | null
  }


  /**
   * Model Niveau
   */

  export type AggregateNiveau = {
    _count: NiveauCountAggregateOutputType | null
    _avg: NiveauAvgAggregateOutputType | null
    _sum: NiveauSumAggregateOutputType | null
    _min: NiveauMinAggregateOutputType | null
    _max: NiveauMaxAggregateOutputType | null
  }

  export type NiveauAvgAggregateOutputType = {
    id: number | null
  }

  export type NiveauSumAggregateOutputType = {
    id: number | null
  }

  export type NiveauMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type NiveauMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type NiveauCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type NiveauAvgAggregateInputType = {
    id?: true
  }

  export type NiveauSumAggregateInputType = {
    id?: true
  }

  export type NiveauMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type NiveauMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type NiveauCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type NiveauAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Niveau to aggregate.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Niveaus
    **/
    _count?: true | NiveauCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NiveauAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NiveauSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NiveauMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NiveauMaxAggregateInputType
  }

  export type GetNiveauAggregateType<T extends NiveauAggregateArgs> = {
        [P in keyof T & keyof AggregateNiveau]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNiveau[P]>
      : GetScalarType<T[P], AggregateNiveau[P]>
  }




  export type NiveauGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NiveauWhereInput
    orderBy?: NiveauOrderByWithAggregationInput | NiveauOrderByWithAggregationInput[]
    by: NiveauScalarFieldEnum[] | NiveauScalarFieldEnum
    having?: NiveauScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NiveauCountAggregateInputType | true
    _avg?: NiveauAvgAggregateInputType
    _sum?: NiveauSumAggregateInputType
    _min?: NiveauMinAggregateInputType
    _max?: NiveauMaxAggregateInputType
  }

  export type NiveauGroupByOutputType = {
    id: number
    nom: string
    _count: NiveauCountAggregateOutputType | null
    _avg: NiveauAvgAggregateOutputType | null
    _sum: NiveauSumAggregateOutputType | null
    _min: NiveauMinAggregateOutputType | null
    _max: NiveauMaxAggregateOutputType | null
  }

  type GetNiveauGroupByPayload<T extends NiveauGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NiveauGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NiveauGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NiveauGroupByOutputType[P]>
            : GetScalarType<T[P], NiveauGroupByOutputType[P]>
        }
      >
    >


  export type NiveauSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    competences?: boolean | Niveau$competencesArgs<ExtArgs>
    _count?: boolean | NiveauCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["niveau"]>



  export type NiveauSelectScalar = {
    id?: boolean
    nom?: boolean
  }

  export type NiveauOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom", ExtArgs["result"]["niveau"]>
  export type NiveauInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competences?: boolean | Niveau$competencesArgs<ExtArgs>
    _count?: boolean | NiveauCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NiveauPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Niveau"
    objects: {
      competences: Prisma.$CompetenceNiveauPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
    }, ExtArgs["result"]["niveau"]>
    composites: {}
  }

  type NiveauGetPayload<S extends boolean | null | undefined | NiveauDefaultArgs> = $Result.GetResult<Prisma.$NiveauPayload, S>

  type NiveauCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NiveauFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NiveauCountAggregateInputType | true
    }

  export interface NiveauDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Niveau'], meta: { name: 'Niveau' } }
    /**
     * Find zero or one Niveau that matches the filter.
     * @param {NiveauFindUniqueArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NiveauFindUniqueArgs>(args: SelectSubset<T, NiveauFindUniqueArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Niveau that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NiveauFindUniqueOrThrowArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NiveauFindUniqueOrThrowArgs>(args: SelectSubset<T, NiveauFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Niveau that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauFindFirstArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NiveauFindFirstArgs>(args?: SelectSubset<T, NiveauFindFirstArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Niveau that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauFindFirstOrThrowArgs} args - Arguments to find a Niveau
     * @example
     * // Get one Niveau
     * const niveau = await prisma.niveau.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NiveauFindFirstOrThrowArgs>(args?: SelectSubset<T, NiveauFindFirstOrThrowArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Niveaus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Niveaus
     * const niveaus = await prisma.niveau.findMany()
     * 
     * // Get first 10 Niveaus
     * const niveaus = await prisma.niveau.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const niveauWithIdOnly = await prisma.niveau.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NiveauFindManyArgs>(args?: SelectSubset<T, NiveauFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Niveau.
     * @param {NiveauCreateArgs} args - Arguments to create a Niveau.
     * @example
     * // Create one Niveau
     * const Niveau = await prisma.niveau.create({
     *   data: {
     *     // ... data to create a Niveau
     *   }
     * })
     * 
     */
    create<T extends NiveauCreateArgs>(args: SelectSubset<T, NiveauCreateArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Niveaus.
     * @param {NiveauCreateManyArgs} args - Arguments to create many Niveaus.
     * @example
     * // Create many Niveaus
     * const niveau = await prisma.niveau.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NiveauCreateManyArgs>(args?: SelectSubset<T, NiveauCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Niveau.
     * @param {NiveauDeleteArgs} args - Arguments to delete one Niveau.
     * @example
     * // Delete one Niveau
     * const Niveau = await prisma.niveau.delete({
     *   where: {
     *     // ... filter to delete one Niveau
     *   }
     * })
     * 
     */
    delete<T extends NiveauDeleteArgs>(args: SelectSubset<T, NiveauDeleteArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Niveau.
     * @param {NiveauUpdateArgs} args - Arguments to update one Niveau.
     * @example
     * // Update one Niveau
     * const niveau = await prisma.niveau.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NiveauUpdateArgs>(args: SelectSubset<T, NiveauUpdateArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Niveaus.
     * @param {NiveauDeleteManyArgs} args - Arguments to filter Niveaus to delete.
     * @example
     * // Delete a few Niveaus
     * const { count } = await prisma.niveau.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NiveauDeleteManyArgs>(args?: SelectSubset<T, NiveauDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Niveaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Niveaus
     * const niveau = await prisma.niveau.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NiveauUpdateManyArgs>(args: SelectSubset<T, NiveauUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Niveau.
     * @param {NiveauUpsertArgs} args - Arguments to update or create a Niveau.
     * @example
     * // Update or create a Niveau
     * const niveau = await prisma.niveau.upsert({
     *   create: {
     *     // ... data to create a Niveau
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Niveau we want to update
     *   }
     * })
     */
    upsert<T extends NiveauUpsertArgs>(args: SelectSubset<T, NiveauUpsertArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Niveaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauCountArgs} args - Arguments to filter Niveaus to count.
     * @example
     * // Count the number of Niveaus
     * const count = await prisma.niveau.count({
     *   where: {
     *     // ... the filter for the Niveaus we want to count
     *   }
     * })
    **/
    count<T extends NiveauCountArgs>(
      args?: Subset<T, NiveauCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NiveauCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Niveau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NiveauAggregateArgs>(args: Subset<T, NiveauAggregateArgs>): Prisma.PrismaPromise<GetNiveauAggregateType<T>>

    /**
     * Group by Niveau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NiveauGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NiveauGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NiveauGroupByArgs['orderBy'] }
        : { orderBy?: NiveauGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NiveauGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNiveauGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Niveau model
   */
  readonly fields: NiveauFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Niveau.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NiveauClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competences<T extends Niveau$competencesArgs<ExtArgs> = {}>(args?: Subset<T, Niveau$competencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Niveau model
   */
  interface NiveauFieldRefs {
    readonly id: FieldRef<"Niveau", 'Int'>
    readonly nom: FieldRef<"Niveau", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Niveau findUnique
   */
  export type NiveauFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau findUniqueOrThrow
   */
  export type NiveauFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau findFirst
   */
  export type NiveauFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Niveaus.
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Niveaus.
     */
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Niveau findFirstOrThrow
   */
  export type NiveauFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveau to fetch.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Niveaus.
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Niveaus.
     */
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Niveau findMany
   */
  export type NiveauFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter, which Niveaus to fetch.
     */
    where?: NiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Niveaus to fetch.
     */
    orderBy?: NiveauOrderByWithRelationInput | NiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Niveaus.
     */
    cursor?: NiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Niveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Niveaus.
     */
    skip?: number
    distinct?: NiveauScalarFieldEnum | NiveauScalarFieldEnum[]
  }

  /**
   * Niveau create
   */
  export type NiveauCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * The data needed to create a Niveau.
     */
    data: XOR<NiveauCreateInput, NiveauUncheckedCreateInput>
  }

  /**
   * Niveau createMany
   */
  export type NiveauCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Niveaus.
     */
    data: NiveauCreateManyInput | NiveauCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Niveau update
   */
  export type NiveauUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * The data needed to update a Niveau.
     */
    data: XOR<NiveauUpdateInput, NiveauUncheckedUpdateInput>
    /**
     * Choose, which Niveau to update.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau updateMany
   */
  export type NiveauUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Niveaus.
     */
    data: XOR<NiveauUpdateManyMutationInput, NiveauUncheckedUpdateManyInput>
    /**
     * Filter which Niveaus to update
     */
    where?: NiveauWhereInput
    /**
     * Limit how many Niveaus to update.
     */
    limit?: number
  }

  /**
   * Niveau upsert
   */
  export type NiveauUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * The filter to search for the Niveau to update in case it exists.
     */
    where: NiveauWhereUniqueInput
    /**
     * In case the Niveau found by the `where` argument doesn't exist, create a new Niveau with this data.
     */
    create: XOR<NiveauCreateInput, NiveauUncheckedCreateInput>
    /**
     * In case the Niveau was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NiveauUpdateInput, NiveauUncheckedUpdateInput>
  }

  /**
   * Niveau delete
   */
  export type NiveauDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
    /**
     * Filter which Niveau to delete.
     */
    where: NiveauWhereUniqueInput
  }

  /**
   * Niveau deleteMany
   */
  export type NiveauDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Niveaus to delete
     */
    where?: NiveauWhereInput
    /**
     * Limit how many Niveaus to delete.
     */
    limit?: number
  }

  /**
   * Niveau.competences
   */
  export type Niveau$competencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    where?: CompetenceNiveauWhereInput
    orderBy?: CompetenceNiveauOrderByWithRelationInput | CompetenceNiveauOrderByWithRelationInput[]
    cursor?: CompetenceNiveauWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetenceNiveauScalarFieldEnum | CompetenceNiveauScalarFieldEnum[]
  }

  /**
   * Niveau without action
   */
  export type NiveauDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Niveau
     */
    select?: NiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Niveau
     */
    omit?: NiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NiveauInclude<ExtArgs> | null
  }


  /**
   * Model Competence
   */

  export type AggregateCompetence = {
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  export type CompetenceAvgAggregateOutputType = {
    id: number | null
  }

  export type CompetenceSumAggregateOutputType = {
    id: number | null
  }

  export type CompetenceMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
  }

  export type CompetenceMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
  }

  export type CompetenceCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    _all: number
  }


  export type CompetenceAvgAggregateInputType = {
    id?: true
  }

  export type CompetenceSumAggregateInputType = {
    id?: true
  }

  export type CompetenceMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
  }

  export type CompetenceMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
  }

  export type CompetenceCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    _all?: true
  }

  export type CompetenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competence to aggregate.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competences
    **/
    _count?: true | CompetenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenceMaxAggregateInputType
  }

  export type GetCompetenceAggregateType<T extends CompetenceAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetence[P]>
      : GetScalarType<T[P], AggregateCompetence[P]>
  }




  export type CompetenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceWhereInput
    orderBy?: CompetenceOrderByWithAggregationInput | CompetenceOrderByWithAggregationInput[]
    by: CompetenceScalarFieldEnum[] | CompetenceScalarFieldEnum
    having?: CompetenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenceCountAggregateInputType | true
    _avg?: CompetenceAvgAggregateInputType
    _sum?: CompetenceSumAggregateInputType
    _min?: CompetenceMinAggregateInputType
    _max?: CompetenceMaxAggregateInputType
  }

  export type CompetenceGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  type GetCompetenceGroupByPayload<T extends CompetenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
        }
      >
    >


  export type CompetenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    niveaux?: boolean | Competence$niveauxArgs<ExtArgs>
    referentiels?: boolean | Competence$referentielsArgs<ExtArgs>
    _count?: boolean | CompetenceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competence"]>



  export type CompetenceSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
  }

  export type CompetenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "description", ExtArgs["result"]["competence"]>
  export type CompetenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    niveaux?: boolean | Competence$niveauxArgs<ExtArgs>
    referentiels?: boolean | Competence$referentielsArgs<ExtArgs>
    _count?: boolean | CompetenceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CompetencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competence"
    objects: {
      niveaux: Prisma.$CompetenceNiveauPayload<ExtArgs>[]
      referentiels: Prisma.$ReferentielCompetencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
    }, ExtArgs["result"]["competence"]>
    composites: {}
  }

  type CompetenceGetPayload<S extends boolean | null | undefined | CompetenceDefaultArgs> = $Result.GetResult<Prisma.$CompetencePayload, S>

  type CompetenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompetenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompetenceCountAggregateInputType | true
    }

  export interface CompetenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competence'], meta: { name: 'Competence' } }
    /**
     * Find zero or one Competence that matches the filter.
     * @param {CompetenceFindUniqueArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetenceFindUniqueArgs>(args: SelectSubset<T, CompetenceFindUniqueArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Competence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompetenceFindUniqueOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetenceFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Competence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetenceFindFirstArgs>(args?: SelectSubset<T, CompetenceFindFirstArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Competence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetenceFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Competences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competences
     * const competences = await prisma.competence.findMany()
     * 
     * // Get first 10 Competences
     * const competences = await prisma.competence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competenceWithIdOnly = await prisma.competence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetenceFindManyArgs>(args?: SelectSubset<T, CompetenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Competence.
     * @param {CompetenceCreateArgs} args - Arguments to create a Competence.
     * @example
     * // Create one Competence
     * const Competence = await prisma.competence.create({
     *   data: {
     *     // ... data to create a Competence
     *   }
     * })
     * 
     */
    create<T extends CompetenceCreateArgs>(args: SelectSubset<T, CompetenceCreateArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Competences.
     * @param {CompetenceCreateManyArgs} args - Arguments to create many Competences.
     * @example
     * // Create many Competences
     * const competence = await prisma.competence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetenceCreateManyArgs>(args?: SelectSubset<T, CompetenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Competence.
     * @param {CompetenceDeleteArgs} args - Arguments to delete one Competence.
     * @example
     * // Delete one Competence
     * const Competence = await prisma.competence.delete({
     *   where: {
     *     // ... filter to delete one Competence
     *   }
     * })
     * 
     */
    delete<T extends CompetenceDeleteArgs>(args: SelectSubset<T, CompetenceDeleteArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Competence.
     * @param {CompetenceUpdateArgs} args - Arguments to update one Competence.
     * @example
     * // Update one Competence
     * const competence = await prisma.competence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetenceUpdateArgs>(args: SelectSubset<T, CompetenceUpdateArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Competences.
     * @param {CompetenceDeleteManyArgs} args - Arguments to filter Competences to delete.
     * @example
     * // Delete a few Competences
     * const { count } = await prisma.competence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetenceDeleteManyArgs>(args?: SelectSubset<T, CompetenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competences
     * const competence = await prisma.competence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetenceUpdateManyArgs>(args: SelectSubset<T, CompetenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competence.
     * @param {CompetenceUpsertArgs} args - Arguments to update or create a Competence.
     * @example
     * // Update or create a Competence
     * const competence = await prisma.competence.upsert({
     *   create: {
     *     // ... data to create a Competence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competence we want to update
     *   }
     * })
     */
    upsert<T extends CompetenceUpsertArgs>(args: SelectSubset<T, CompetenceUpsertArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceCountArgs} args - Arguments to filter Competences to count.
     * @example
     * // Count the number of Competences
     * const count = await prisma.competence.count({
     *   where: {
     *     // ... the filter for the Competences we want to count
     *   }
     * })
    **/
    count<T extends CompetenceCountArgs>(
      args?: Subset<T, CompetenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenceAggregateArgs>(args: Subset<T, CompetenceAggregateArgs>): Prisma.PrismaPromise<GetCompetenceAggregateType<T>>

    /**
     * Group by Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenceGroupByArgs['orderBy'] }
        : { orderBy?: CompetenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competence model
   */
  readonly fields: CompetenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    niveaux<T extends Competence$niveauxArgs<ExtArgs> = {}>(args?: Subset<T, Competence$niveauxArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referentiels<T extends Competence$referentielsArgs<ExtArgs> = {}>(args?: Subset<T, Competence$referentielsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Competence model
   */
  interface CompetenceFieldRefs {
    readonly id: FieldRef<"Competence", 'Int'>
    readonly nom: FieldRef<"Competence", 'String'>
    readonly description: FieldRef<"Competence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Competence findUnique
   */
  export type CompetenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findUniqueOrThrow
   */
  export type CompetenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findFirst
   */
  export type CompetenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence findFirstOrThrow
   */
  export type CompetenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence findMany
   */
  export type CompetenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competences to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence create
   */
  export type CompetenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Competence.
     */
    data: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
  }

  /**
   * Competence createMany
   */
  export type CompetenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competences.
     */
    data: CompetenceCreateManyInput | CompetenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Competence update
   */
  export type CompetenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Competence.
     */
    data: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
    /**
     * Choose, which Competence to update.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence updateMany
   */
  export type CompetenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competences.
     */
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyInput>
    /**
     * Filter which Competences to update
     */
    where?: CompetenceWhereInput
    /**
     * Limit how many Competences to update.
     */
    limit?: number
  }

  /**
   * Competence upsert
   */
  export type CompetenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Competence to update in case it exists.
     */
    where: CompetenceWhereUniqueInput
    /**
     * In case the Competence found by the `where` argument doesn't exist, create a new Competence with this data.
     */
    create: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
    /**
     * In case the Competence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
  }

  /**
   * Competence delete
   */
  export type CompetenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter which Competence to delete.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence deleteMany
   */
  export type CompetenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competences to delete
     */
    where?: CompetenceWhereInput
    /**
     * Limit how many Competences to delete.
     */
    limit?: number
  }

  /**
   * Competence.niveaux
   */
  export type Competence$niveauxArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    where?: CompetenceNiveauWhereInput
    orderBy?: CompetenceNiveauOrderByWithRelationInput | CompetenceNiveauOrderByWithRelationInput[]
    cursor?: CompetenceNiveauWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetenceNiveauScalarFieldEnum | CompetenceNiveauScalarFieldEnum[]
  }

  /**
   * Competence.referentiels
   */
  export type Competence$referentielsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    where?: ReferentielCompetenceWhereInput
    orderBy?: ReferentielCompetenceOrderByWithRelationInput | ReferentielCompetenceOrderByWithRelationInput[]
    cursor?: ReferentielCompetenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferentielCompetenceScalarFieldEnum | ReferentielCompetenceScalarFieldEnum[]
  }

  /**
   * Competence without action
   */
  export type CompetenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Competence
     */
    omit?: CompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
  }


  /**
   * Model CompetenceNiveau
   */

  export type AggregateCompetenceNiveau = {
    _count: CompetenceNiveauCountAggregateOutputType | null
    _avg: CompetenceNiveauAvgAggregateOutputType | null
    _sum: CompetenceNiveauSumAggregateOutputType | null
    _min: CompetenceNiveauMinAggregateOutputType | null
    _max: CompetenceNiveauMaxAggregateOutputType | null
  }

  export type CompetenceNiveauAvgAggregateOutputType = {
    competenceId: number | null
    niveauId: number | null
  }

  export type CompetenceNiveauSumAggregateOutputType = {
    competenceId: number | null
    niveauId: number | null
  }

  export type CompetenceNiveauMinAggregateOutputType = {
    competenceId: number | null
    niveauId: number | null
  }

  export type CompetenceNiveauMaxAggregateOutputType = {
    competenceId: number | null
    niveauId: number | null
  }

  export type CompetenceNiveauCountAggregateOutputType = {
    competenceId: number
    niveauId: number
    _all: number
  }


  export type CompetenceNiveauAvgAggregateInputType = {
    competenceId?: true
    niveauId?: true
  }

  export type CompetenceNiveauSumAggregateInputType = {
    competenceId?: true
    niveauId?: true
  }

  export type CompetenceNiveauMinAggregateInputType = {
    competenceId?: true
    niveauId?: true
  }

  export type CompetenceNiveauMaxAggregateInputType = {
    competenceId?: true
    niveauId?: true
  }

  export type CompetenceNiveauCountAggregateInputType = {
    competenceId?: true
    niveauId?: true
    _all?: true
  }

  export type CompetenceNiveauAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetenceNiveau to aggregate.
     */
    where?: CompetenceNiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetenceNiveaus to fetch.
     */
    orderBy?: CompetenceNiveauOrderByWithRelationInput | CompetenceNiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenceNiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetenceNiveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetenceNiveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompetenceNiveaus
    **/
    _count?: true | CompetenceNiveauCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetenceNiveauAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetenceNiveauSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenceNiveauMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenceNiveauMaxAggregateInputType
  }

  export type GetCompetenceNiveauAggregateType<T extends CompetenceNiveauAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetenceNiveau]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetenceNiveau[P]>
      : GetScalarType<T[P], AggregateCompetenceNiveau[P]>
  }




  export type CompetenceNiveauGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceNiveauWhereInput
    orderBy?: CompetenceNiveauOrderByWithAggregationInput | CompetenceNiveauOrderByWithAggregationInput[]
    by: CompetenceNiveauScalarFieldEnum[] | CompetenceNiveauScalarFieldEnum
    having?: CompetenceNiveauScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenceNiveauCountAggregateInputType | true
    _avg?: CompetenceNiveauAvgAggregateInputType
    _sum?: CompetenceNiveauSumAggregateInputType
    _min?: CompetenceNiveauMinAggregateInputType
    _max?: CompetenceNiveauMaxAggregateInputType
  }

  export type CompetenceNiveauGroupByOutputType = {
    competenceId: number
    niveauId: number
    _count: CompetenceNiveauCountAggregateOutputType | null
    _avg: CompetenceNiveauAvgAggregateOutputType | null
    _sum: CompetenceNiveauSumAggregateOutputType | null
    _min: CompetenceNiveauMinAggregateOutputType | null
    _max: CompetenceNiveauMaxAggregateOutputType | null
  }

  type GetCompetenceNiveauGroupByPayload<T extends CompetenceNiveauGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetenceNiveauGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenceNiveauGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenceNiveauGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenceNiveauGroupByOutputType[P]>
        }
      >
    >


  export type CompetenceNiveauSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    competenceId?: boolean
    niveauId?: boolean
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
    niveau?: boolean | NiveauDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competenceNiveau"]>



  export type CompetenceNiveauSelectScalar = {
    competenceId?: boolean
    niveauId?: boolean
  }

  export type CompetenceNiveauOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"competenceId" | "niveauId", ExtArgs["result"]["competenceNiveau"]>
  export type CompetenceNiveauInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
    niveau?: boolean | NiveauDefaultArgs<ExtArgs>
  }

  export type $CompetenceNiveauPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompetenceNiveau"
    objects: {
      competence: Prisma.$CompetencePayload<ExtArgs>
      niveau: Prisma.$NiveauPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      competenceId: number
      niveauId: number
    }, ExtArgs["result"]["competenceNiveau"]>
    composites: {}
  }

  type CompetenceNiveauGetPayload<S extends boolean | null | undefined | CompetenceNiveauDefaultArgs> = $Result.GetResult<Prisma.$CompetenceNiveauPayload, S>

  type CompetenceNiveauCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompetenceNiveauFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompetenceNiveauCountAggregateInputType | true
    }

  export interface CompetenceNiveauDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompetenceNiveau'], meta: { name: 'CompetenceNiveau' } }
    /**
     * Find zero or one CompetenceNiveau that matches the filter.
     * @param {CompetenceNiveauFindUniqueArgs} args - Arguments to find a CompetenceNiveau
     * @example
     * // Get one CompetenceNiveau
     * const competenceNiveau = await prisma.competenceNiveau.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetenceNiveauFindUniqueArgs>(args: SelectSubset<T, CompetenceNiveauFindUniqueArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompetenceNiveau that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompetenceNiveauFindUniqueOrThrowArgs} args - Arguments to find a CompetenceNiveau
     * @example
     * // Get one CompetenceNiveau
     * const competenceNiveau = await prisma.competenceNiveau.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetenceNiveauFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetenceNiveauFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompetenceNiveau that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauFindFirstArgs} args - Arguments to find a CompetenceNiveau
     * @example
     * // Get one CompetenceNiveau
     * const competenceNiveau = await prisma.competenceNiveau.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetenceNiveauFindFirstArgs>(args?: SelectSubset<T, CompetenceNiveauFindFirstArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompetenceNiveau that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauFindFirstOrThrowArgs} args - Arguments to find a CompetenceNiveau
     * @example
     * // Get one CompetenceNiveau
     * const competenceNiveau = await prisma.competenceNiveau.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetenceNiveauFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetenceNiveauFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompetenceNiveaus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompetenceNiveaus
     * const competenceNiveaus = await prisma.competenceNiveau.findMany()
     * 
     * // Get first 10 CompetenceNiveaus
     * const competenceNiveaus = await prisma.competenceNiveau.findMany({ take: 10 })
     * 
     * // Only select the `competenceId`
     * const competenceNiveauWithCompetenceIdOnly = await prisma.competenceNiveau.findMany({ select: { competenceId: true } })
     * 
     */
    findMany<T extends CompetenceNiveauFindManyArgs>(args?: SelectSubset<T, CompetenceNiveauFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompetenceNiveau.
     * @param {CompetenceNiveauCreateArgs} args - Arguments to create a CompetenceNiveau.
     * @example
     * // Create one CompetenceNiveau
     * const CompetenceNiveau = await prisma.competenceNiveau.create({
     *   data: {
     *     // ... data to create a CompetenceNiveau
     *   }
     * })
     * 
     */
    create<T extends CompetenceNiveauCreateArgs>(args: SelectSubset<T, CompetenceNiveauCreateArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompetenceNiveaus.
     * @param {CompetenceNiveauCreateManyArgs} args - Arguments to create many CompetenceNiveaus.
     * @example
     * // Create many CompetenceNiveaus
     * const competenceNiveau = await prisma.competenceNiveau.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetenceNiveauCreateManyArgs>(args?: SelectSubset<T, CompetenceNiveauCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CompetenceNiveau.
     * @param {CompetenceNiveauDeleteArgs} args - Arguments to delete one CompetenceNiveau.
     * @example
     * // Delete one CompetenceNiveau
     * const CompetenceNiveau = await prisma.competenceNiveau.delete({
     *   where: {
     *     // ... filter to delete one CompetenceNiveau
     *   }
     * })
     * 
     */
    delete<T extends CompetenceNiveauDeleteArgs>(args: SelectSubset<T, CompetenceNiveauDeleteArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompetenceNiveau.
     * @param {CompetenceNiveauUpdateArgs} args - Arguments to update one CompetenceNiveau.
     * @example
     * // Update one CompetenceNiveau
     * const competenceNiveau = await prisma.competenceNiveau.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetenceNiveauUpdateArgs>(args: SelectSubset<T, CompetenceNiveauUpdateArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompetenceNiveaus.
     * @param {CompetenceNiveauDeleteManyArgs} args - Arguments to filter CompetenceNiveaus to delete.
     * @example
     * // Delete a few CompetenceNiveaus
     * const { count } = await prisma.competenceNiveau.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetenceNiveauDeleteManyArgs>(args?: SelectSubset<T, CompetenceNiveauDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompetenceNiveaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompetenceNiveaus
     * const competenceNiveau = await prisma.competenceNiveau.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetenceNiveauUpdateManyArgs>(args: SelectSubset<T, CompetenceNiveauUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompetenceNiveau.
     * @param {CompetenceNiveauUpsertArgs} args - Arguments to update or create a CompetenceNiveau.
     * @example
     * // Update or create a CompetenceNiveau
     * const competenceNiveau = await prisma.competenceNiveau.upsert({
     *   create: {
     *     // ... data to create a CompetenceNiveau
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompetenceNiveau we want to update
     *   }
     * })
     */
    upsert<T extends CompetenceNiveauUpsertArgs>(args: SelectSubset<T, CompetenceNiveauUpsertArgs<ExtArgs>>): Prisma__CompetenceNiveauClient<$Result.GetResult<Prisma.$CompetenceNiveauPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompetenceNiveaus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauCountArgs} args - Arguments to filter CompetenceNiveaus to count.
     * @example
     * // Count the number of CompetenceNiveaus
     * const count = await prisma.competenceNiveau.count({
     *   where: {
     *     // ... the filter for the CompetenceNiveaus we want to count
     *   }
     * })
    **/
    count<T extends CompetenceNiveauCountArgs>(
      args?: Subset<T, CompetenceNiveauCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenceNiveauCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompetenceNiveau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenceNiveauAggregateArgs>(args: Subset<T, CompetenceNiveauAggregateArgs>): Prisma.PrismaPromise<GetCompetenceNiveauAggregateType<T>>

    /**
     * Group by CompetenceNiveau.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceNiveauGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenceNiveauGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenceNiveauGroupByArgs['orderBy'] }
        : { orderBy?: CompetenceNiveauGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenceNiveauGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenceNiveauGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompetenceNiveau model
   */
  readonly fields: CompetenceNiveauFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompetenceNiveau.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetenceNiveauClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competence<T extends CompetenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetenceDefaultArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    niveau<T extends NiveauDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NiveauDefaultArgs<ExtArgs>>): Prisma__NiveauClient<$Result.GetResult<Prisma.$NiveauPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompetenceNiveau model
   */
  interface CompetenceNiveauFieldRefs {
    readonly competenceId: FieldRef<"CompetenceNiveau", 'Int'>
    readonly niveauId: FieldRef<"CompetenceNiveau", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CompetenceNiveau findUnique
   */
  export type CompetenceNiveauFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * Filter, which CompetenceNiveau to fetch.
     */
    where: CompetenceNiveauWhereUniqueInput
  }

  /**
   * CompetenceNiveau findUniqueOrThrow
   */
  export type CompetenceNiveauFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * Filter, which CompetenceNiveau to fetch.
     */
    where: CompetenceNiveauWhereUniqueInput
  }

  /**
   * CompetenceNiveau findFirst
   */
  export type CompetenceNiveauFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * Filter, which CompetenceNiveau to fetch.
     */
    where?: CompetenceNiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetenceNiveaus to fetch.
     */
    orderBy?: CompetenceNiveauOrderByWithRelationInput | CompetenceNiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetenceNiveaus.
     */
    cursor?: CompetenceNiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetenceNiveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetenceNiveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetenceNiveaus.
     */
    distinct?: CompetenceNiveauScalarFieldEnum | CompetenceNiveauScalarFieldEnum[]
  }

  /**
   * CompetenceNiveau findFirstOrThrow
   */
  export type CompetenceNiveauFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * Filter, which CompetenceNiveau to fetch.
     */
    where?: CompetenceNiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetenceNiveaus to fetch.
     */
    orderBy?: CompetenceNiveauOrderByWithRelationInput | CompetenceNiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompetenceNiveaus.
     */
    cursor?: CompetenceNiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetenceNiveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetenceNiveaus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompetenceNiveaus.
     */
    distinct?: CompetenceNiveauScalarFieldEnum | CompetenceNiveauScalarFieldEnum[]
  }

  /**
   * CompetenceNiveau findMany
   */
  export type CompetenceNiveauFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * Filter, which CompetenceNiveaus to fetch.
     */
    where?: CompetenceNiveauWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompetenceNiveaus to fetch.
     */
    orderBy?: CompetenceNiveauOrderByWithRelationInput | CompetenceNiveauOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompetenceNiveaus.
     */
    cursor?: CompetenceNiveauWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompetenceNiveaus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompetenceNiveaus.
     */
    skip?: number
    distinct?: CompetenceNiveauScalarFieldEnum | CompetenceNiveauScalarFieldEnum[]
  }

  /**
   * CompetenceNiveau create
   */
  export type CompetenceNiveauCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * The data needed to create a CompetenceNiveau.
     */
    data: XOR<CompetenceNiveauCreateInput, CompetenceNiveauUncheckedCreateInput>
  }

  /**
   * CompetenceNiveau createMany
   */
  export type CompetenceNiveauCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompetenceNiveaus.
     */
    data: CompetenceNiveauCreateManyInput | CompetenceNiveauCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompetenceNiveau update
   */
  export type CompetenceNiveauUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * The data needed to update a CompetenceNiveau.
     */
    data: XOR<CompetenceNiveauUpdateInput, CompetenceNiveauUncheckedUpdateInput>
    /**
     * Choose, which CompetenceNiveau to update.
     */
    where: CompetenceNiveauWhereUniqueInput
  }

  /**
   * CompetenceNiveau updateMany
   */
  export type CompetenceNiveauUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompetenceNiveaus.
     */
    data: XOR<CompetenceNiveauUpdateManyMutationInput, CompetenceNiveauUncheckedUpdateManyInput>
    /**
     * Filter which CompetenceNiveaus to update
     */
    where?: CompetenceNiveauWhereInput
    /**
     * Limit how many CompetenceNiveaus to update.
     */
    limit?: number
  }

  /**
   * CompetenceNiveau upsert
   */
  export type CompetenceNiveauUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * The filter to search for the CompetenceNiveau to update in case it exists.
     */
    where: CompetenceNiveauWhereUniqueInput
    /**
     * In case the CompetenceNiveau found by the `where` argument doesn't exist, create a new CompetenceNiveau with this data.
     */
    create: XOR<CompetenceNiveauCreateInput, CompetenceNiveauUncheckedCreateInput>
    /**
     * In case the CompetenceNiveau was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenceNiveauUpdateInput, CompetenceNiveauUncheckedUpdateInput>
  }

  /**
   * CompetenceNiveau delete
   */
  export type CompetenceNiveauDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
    /**
     * Filter which CompetenceNiveau to delete.
     */
    where: CompetenceNiveauWhereUniqueInput
  }

  /**
   * CompetenceNiveau deleteMany
   */
  export type CompetenceNiveauDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompetenceNiveaus to delete
     */
    where?: CompetenceNiveauWhereInput
    /**
     * Limit how many CompetenceNiveaus to delete.
     */
    limit?: number
  }

  /**
   * CompetenceNiveau without action
   */
  export type CompetenceNiveauDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompetenceNiveau
     */
    select?: CompetenceNiveauSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompetenceNiveau
     */
    omit?: CompetenceNiveauOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceNiveauInclude<ExtArgs> | null
  }


  /**
   * Model Referentiel
   */

  export type AggregateReferentiel = {
    _count: ReferentielCountAggregateOutputType | null
    _avg: ReferentielAvgAggregateOutputType | null
    _sum: ReferentielSumAggregateOutputType | null
    _min: ReferentielMinAggregateOutputType | null
    _max: ReferentielMaxAggregateOutputType | null
  }

  export type ReferentielAvgAggregateOutputType = {
    id: number | null
  }

  export type ReferentielSumAggregateOutputType = {
    id: number | null
  }

  export type ReferentielMinAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
  }

  export type ReferentielMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    description: string | null
  }

  export type ReferentielCountAggregateOutputType = {
    id: number
    nom: number
    description: number
    _all: number
  }


  export type ReferentielAvgAggregateInputType = {
    id?: true
  }

  export type ReferentielSumAggregateInputType = {
    id?: true
  }

  export type ReferentielMinAggregateInputType = {
    id?: true
    nom?: true
    description?: true
  }

  export type ReferentielMaxAggregateInputType = {
    id?: true
    nom?: true
    description?: true
  }

  export type ReferentielCountAggregateInputType = {
    id?: true
    nom?: true
    description?: true
    _all?: true
  }

  export type ReferentielAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referentiel to aggregate.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Referentiels
    **/
    _count?: true | ReferentielCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferentielAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferentielSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferentielMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferentielMaxAggregateInputType
  }

  export type GetReferentielAggregateType<T extends ReferentielAggregateArgs> = {
        [P in keyof T & keyof AggregateReferentiel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferentiel[P]>
      : GetScalarType<T[P], AggregateReferentiel[P]>
  }




  export type ReferentielGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferentielWhereInput
    orderBy?: ReferentielOrderByWithAggregationInput | ReferentielOrderByWithAggregationInput[]
    by: ReferentielScalarFieldEnum[] | ReferentielScalarFieldEnum
    having?: ReferentielScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferentielCountAggregateInputType | true
    _avg?: ReferentielAvgAggregateInputType
    _sum?: ReferentielSumAggregateInputType
    _min?: ReferentielMinAggregateInputType
    _max?: ReferentielMaxAggregateInputType
  }

  export type ReferentielGroupByOutputType = {
    id: number
    nom: string
    description: string | null
    _count: ReferentielCountAggregateOutputType | null
    _avg: ReferentielAvgAggregateOutputType | null
    _sum: ReferentielSumAggregateOutputType | null
    _min: ReferentielMinAggregateOutputType | null
    _max: ReferentielMaxAggregateOutputType | null
  }

  type GetReferentielGroupByPayload<T extends ReferentielGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferentielGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferentielGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferentielGroupByOutputType[P]>
            : GetScalarType<T[P], ReferentielGroupByOutputType[P]>
        }
      >
    >


  export type ReferentielSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    description?: boolean
    competences?: boolean | Referentiel$competencesArgs<ExtArgs>
    users?: boolean | Referentiel$usersArgs<ExtArgs>
    promos?: boolean | Referentiel$promosArgs<ExtArgs>
    _count?: boolean | ReferentielCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referentiel"]>



  export type ReferentielSelectScalar = {
    id?: boolean
    nom?: boolean
    description?: boolean
  }

  export type ReferentielOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom" | "description", ExtArgs["result"]["referentiel"]>
  export type ReferentielInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competences?: boolean | Referentiel$competencesArgs<ExtArgs>
    users?: boolean | Referentiel$usersArgs<ExtArgs>
    promos?: boolean | Referentiel$promosArgs<ExtArgs>
    _count?: boolean | ReferentielCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ReferentielPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Referentiel"
    objects: {
      competences: Prisma.$ReferentielCompetencePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      promos: Prisma.$PromoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      description: string | null
    }, ExtArgs["result"]["referentiel"]>
    composites: {}
  }

  type ReferentielGetPayload<S extends boolean | null | undefined | ReferentielDefaultArgs> = $Result.GetResult<Prisma.$ReferentielPayload, S>

  type ReferentielCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferentielFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferentielCountAggregateInputType | true
    }

  export interface ReferentielDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Referentiel'], meta: { name: 'Referentiel' } }
    /**
     * Find zero or one Referentiel that matches the filter.
     * @param {ReferentielFindUniqueArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferentielFindUniqueArgs>(args: SelectSubset<T, ReferentielFindUniqueArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Referentiel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferentielFindUniqueOrThrowArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferentielFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferentielFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referentiel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielFindFirstArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferentielFindFirstArgs>(args?: SelectSubset<T, ReferentielFindFirstArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Referentiel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielFindFirstOrThrowArgs} args - Arguments to find a Referentiel
     * @example
     * // Get one Referentiel
     * const referentiel = await prisma.referentiel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferentielFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferentielFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Referentiels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Referentiels
     * const referentiels = await prisma.referentiel.findMany()
     * 
     * // Get first 10 Referentiels
     * const referentiels = await prisma.referentiel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referentielWithIdOnly = await prisma.referentiel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReferentielFindManyArgs>(args?: SelectSubset<T, ReferentielFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Referentiel.
     * @param {ReferentielCreateArgs} args - Arguments to create a Referentiel.
     * @example
     * // Create one Referentiel
     * const Referentiel = await prisma.referentiel.create({
     *   data: {
     *     // ... data to create a Referentiel
     *   }
     * })
     * 
     */
    create<T extends ReferentielCreateArgs>(args: SelectSubset<T, ReferentielCreateArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Referentiels.
     * @param {ReferentielCreateManyArgs} args - Arguments to create many Referentiels.
     * @example
     * // Create many Referentiels
     * const referentiel = await prisma.referentiel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferentielCreateManyArgs>(args?: SelectSubset<T, ReferentielCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Referentiel.
     * @param {ReferentielDeleteArgs} args - Arguments to delete one Referentiel.
     * @example
     * // Delete one Referentiel
     * const Referentiel = await prisma.referentiel.delete({
     *   where: {
     *     // ... filter to delete one Referentiel
     *   }
     * })
     * 
     */
    delete<T extends ReferentielDeleteArgs>(args: SelectSubset<T, ReferentielDeleteArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Referentiel.
     * @param {ReferentielUpdateArgs} args - Arguments to update one Referentiel.
     * @example
     * // Update one Referentiel
     * const referentiel = await prisma.referentiel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferentielUpdateArgs>(args: SelectSubset<T, ReferentielUpdateArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Referentiels.
     * @param {ReferentielDeleteManyArgs} args - Arguments to filter Referentiels to delete.
     * @example
     * // Delete a few Referentiels
     * const { count } = await prisma.referentiel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferentielDeleteManyArgs>(args?: SelectSubset<T, ReferentielDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Referentiels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Referentiels
     * const referentiel = await prisma.referentiel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferentielUpdateManyArgs>(args: SelectSubset<T, ReferentielUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Referentiel.
     * @param {ReferentielUpsertArgs} args - Arguments to update or create a Referentiel.
     * @example
     * // Update or create a Referentiel
     * const referentiel = await prisma.referentiel.upsert({
     *   create: {
     *     // ... data to create a Referentiel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Referentiel we want to update
     *   }
     * })
     */
    upsert<T extends ReferentielUpsertArgs>(args: SelectSubset<T, ReferentielUpsertArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Referentiels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCountArgs} args - Arguments to filter Referentiels to count.
     * @example
     * // Count the number of Referentiels
     * const count = await prisma.referentiel.count({
     *   where: {
     *     // ... the filter for the Referentiels we want to count
     *   }
     * })
    **/
    count<T extends ReferentielCountArgs>(
      args?: Subset<T, ReferentielCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferentielCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Referentiel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferentielAggregateArgs>(args: Subset<T, ReferentielAggregateArgs>): Prisma.PrismaPromise<GetReferentielAggregateType<T>>

    /**
     * Group by Referentiel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferentielGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferentielGroupByArgs['orderBy'] }
        : { orderBy?: ReferentielGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferentielGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferentielGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Referentiel model
   */
  readonly fields: ReferentielFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Referentiel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferentielClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    competences<T extends Referentiel$competencesArgs<ExtArgs> = {}>(args?: Subset<T, Referentiel$competencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Referentiel$usersArgs<ExtArgs> = {}>(args?: Subset<T, Referentiel$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    promos<T extends Referentiel$promosArgs<ExtArgs> = {}>(args?: Subset<T, Referentiel$promosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PromoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Referentiel model
   */
  interface ReferentielFieldRefs {
    readonly id: FieldRef<"Referentiel", 'Int'>
    readonly nom: FieldRef<"Referentiel", 'String'>
    readonly description: FieldRef<"Referentiel", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Referentiel findUnique
   */
  export type ReferentielFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel findUniqueOrThrow
   */
  export type ReferentielFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel findFirst
   */
  export type ReferentielFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referentiels.
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referentiels.
     */
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Referentiel findFirstOrThrow
   */
  export type ReferentielFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiel to fetch.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Referentiels.
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Referentiels.
     */
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Referentiel findMany
   */
  export type ReferentielFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter, which Referentiels to fetch.
     */
    where?: ReferentielWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Referentiels to fetch.
     */
    orderBy?: ReferentielOrderByWithRelationInput | ReferentielOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Referentiels.
     */
    cursor?: ReferentielWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Referentiels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Referentiels.
     */
    skip?: number
    distinct?: ReferentielScalarFieldEnum | ReferentielScalarFieldEnum[]
  }

  /**
   * Referentiel create
   */
  export type ReferentielCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * The data needed to create a Referentiel.
     */
    data: XOR<ReferentielCreateInput, ReferentielUncheckedCreateInput>
  }

  /**
   * Referentiel createMany
   */
  export type ReferentielCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Referentiels.
     */
    data: ReferentielCreateManyInput | ReferentielCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Referentiel update
   */
  export type ReferentielUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * The data needed to update a Referentiel.
     */
    data: XOR<ReferentielUpdateInput, ReferentielUncheckedUpdateInput>
    /**
     * Choose, which Referentiel to update.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel updateMany
   */
  export type ReferentielUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Referentiels.
     */
    data: XOR<ReferentielUpdateManyMutationInput, ReferentielUncheckedUpdateManyInput>
    /**
     * Filter which Referentiels to update
     */
    where?: ReferentielWhereInput
    /**
     * Limit how many Referentiels to update.
     */
    limit?: number
  }

  /**
   * Referentiel upsert
   */
  export type ReferentielUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * The filter to search for the Referentiel to update in case it exists.
     */
    where: ReferentielWhereUniqueInput
    /**
     * In case the Referentiel found by the `where` argument doesn't exist, create a new Referentiel with this data.
     */
    create: XOR<ReferentielCreateInput, ReferentielUncheckedCreateInput>
    /**
     * In case the Referentiel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferentielUpdateInput, ReferentielUncheckedUpdateInput>
  }

  /**
   * Referentiel delete
   */
  export type ReferentielDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
    /**
     * Filter which Referentiel to delete.
     */
    where: ReferentielWhereUniqueInput
  }

  /**
   * Referentiel deleteMany
   */
  export type ReferentielDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Referentiels to delete
     */
    where?: ReferentielWhereInput
    /**
     * Limit how many Referentiels to delete.
     */
    limit?: number
  }

  /**
   * Referentiel.competences
   */
  export type Referentiel$competencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    where?: ReferentielCompetenceWhereInput
    orderBy?: ReferentielCompetenceOrderByWithRelationInput | ReferentielCompetenceOrderByWithRelationInput[]
    cursor?: ReferentielCompetenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferentielCompetenceScalarFieldEnum | ReferentielCompetenceScalarFieldEnum[]
  }

  /**
   * Referentiel.users
   */
  export type Referentiel$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Referentiel.promos
   */
  export type Referentiel$promosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Promo
     */
    select?: PromoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Promo
     */
    omit?: PromoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PromoInclude<ExtArgs> | null
    where?: PromoWhereInput
    orderBy?: PromoOrderByWithRelationInput | PromoOrderByWithRelationInput[]
    cursor?: PromoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PromoScalarFieldEnum | PromoScalarFieldEnum[]
  }

  /**
   * Referentiel without action
   */
  export type ReferentielDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Referentiel
     */
    select?: ReferentielSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Referentiel
     */
    omit?: ReferentielOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielInclude<ExtArgs> | null
  }


  /**
   * Model ReferentielCompetence
   */

  export type AggregateReferentielCompetence = {
    _count: ReferentielCompetenceCountAggregateOutputType | null
    _avg: ReferentielCompetenceAvgAggregateOutputType | null
    _sum: ReferentielCompetenceSumAggregateOutputType | null
    _min: ReferentielCompetenceMinAggregateOutputType | null
    _max: ReferentielCompetenceMaxAggregateOutputType | null
  }

  export type ReferentielCompetenceAvgAggregateOutputType = {
    referentielId: number | null
    competenceId: number | null
  }

  export type ReferentielCompetenceSumAggregateOutputType = {
    referentielId: number | null
    competenceId: number | null
  }

  export type ReferentielCompetenceMinAggregateOutputType = {
    referentielId: number | null
    competenceId: number | null
  }

  export type ReferentielCompetenceMaxAggregateOutputType = {
    referentielId: number | null
    competenceId: number | null
  }

  export type ReferentielCompetenceCountAggregateOutputType = {
    referentielId: number
    competenceId: number
    _all: number
  }


  export type ReferentielCompetenceAvgAggregateInputType = {
    referentielId?: true
    competenceId?: true
  }

  export type ReferentielCompetenceSumAggregateInputType = {
    referentielId?: true
    competenceId?: true
  }

  export type ReferentielCompetenceMinAggregateInputType = {
    referentielId?: true
    competenceId?: true
  }

  export type ReferentielCompetenceMaxAggregateInputType = {
    referentielId?: true
    competenceId?: true
  }

  export type ReferentielCompetenceCountAggregateInputType = {
    referentielId?: true
    competenceId?: true
    _all?: true
  }

  export type ReferentielCompetenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferentielCompetence to aggregate.
     */
    where?: ReferentielCompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferentielCompetences to fetch.
     */
    orderBy?: ReferentielCompetenceOrderByWithRelationInput | ReferentielCompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferentielCompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferentielCompetences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferentielCompetences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReferentielCompetences
    **/
    _count?: true | ReferentielCompetenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferentielCompetenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferentielCompetenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferentielCompetenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferentielCompetenceMaxAggregateInputType
  }

  export type GetReferentielCompetenceAggregateType<T extends ReferentielCompetenceAggregateArgs> = {
        [P in keyof T & keyof AggregateReferentielCompetence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReferentielCompetence[P]>
      : GetScalarType<T[P], AggregateReferentielCompetence[P]>
  }




  export type ReferentielCompetenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferentielCompetenceWhereInput
    orderBy?: ReferentielCompetenceOrderByWithAggregationInput | ReferentielCompetenceOrderByWithAggregationInput[]
    by: ReferentielCompetenceScalarFieldEnum[] | ReferentielCompetenceScalarFieldEnum
    having?: ReferentielCompetenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferentielCompetenceCountAggregateInputType | true
    _avg?: ReferentielCompetenceAvgAggregateInputType
    _sum?: ReferentielCompetenceSumAggregateInputType
    _min?: ReferentielCompetenceMinAggregateInputType
    _max?: ReferentielCompetenceMaxAggregateInputType
  }

  export type ReferentielCompetenceGroupByOutputType = {
    referentielId: number
    competenceId: number
    _count: ReferentielCompetenceCountAggregateOutputType | null
    _avg: ReferentielCompetenceAvgAggregateOutputType | null
    _sum: ReferentielCompetenceSumAggregateOutputType | null
    _min: ReferentielCompetenceMinAggregateOutputType | null
    _max: ReferentielCompetenceMaxAggregateOutputType | null
  }

  type GetReferentielCompetenceGroupByPayload<T extends ReferentielCompetenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferentielCompetenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferentielCompetenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferentielCompetenceGroupByOutputType[P]>
            : GetScalarType<T[P], ReferentielCompetenceGroupByOutputType[P]>
        }
      >
    >


  export type ReferentielCompetenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    referentielId?: boolean
    competenceId?: boolean
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["referentielCompetence"]>



  export type ReferentielCompetenceSelectScalar = {
    referentielId?: boolean
    competenceId?: boolean
  }

  export type ReferentielCompetenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"referentielId" | "competenceId", ExtArgs["result"]["referentielCompetence"]>
  export type ReferentielCompetenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referentiel?: boolean | ReferentielDefaultArgs<ExtArgs>
    competence?: boolean | CompetenceDefaultArgs<ExtArgs>
  }

  export type $ReferentielCompetencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReferentielCompetence"
    objects: {
      referentiel: Prisma.$ReferentielPayload<ExtArgs>
      competence: Prisma.$CompetencePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      referentielId: number
      competenceId: number
    }, ExtArgs["result"]["referentielCompetence"]>
    composites: {}
  }

  type ReferentielCompetenceGetPayload<S extends boolean | null | undefined | ReferentielCompetenceDefaultArgs> = $Result.GetResult<Prisma.$ReferentielCompetencePayload, S>

  type ReferentielCompetenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReferentielCompetenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReferentielCompetenceCountAggregateInputType | true
    }

  export interface ReferentielCompetenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReferentielCompetence'], meta: { name: 'ReferentielCompetence' } }
    /**
     * Find zero or one ReferentielCompetence that matches the filter.
     * @param {ReferentielCompetenceFindUniqueArgs} args - Arguments to find a ReferentielCompetence
     * @example
     * // Get one ReferentielCompetence
     * const referentielCompetence = await prisma.referentielCompetence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReferentielCompetenceFindUniqueArgs>(args: SelectSubset<T, ReferentielCompetenceFindUniqueArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReferentielCompetence that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReferentielCompetenceFindUniqueOrThrowArgs} args - Arguments to find a ReferentielCompetence
     * @example
     * // Get one ReferentielCompetence
     * const referentielCompetence = await prisma.referentielCompetence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReferentielCompetenceFindUniqueOrThrowArgs>(args: SelectSubset<T, ReferentielCompetenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferentielCompetence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceFindFirstArgs} args - Arguments to find a ReferentielCompetence
     * @example
     * // Get one ReferentielCompetence
     * const referentielCompetence = await prisma.referentielCompetence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReferentielCompetenceFindFirstArgs>(args?: SelectSubset<T, ReferentielCompetenceFindFirstArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReferentielCompetence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceFindFirstOrThrowArgs} args - Arguments to find a ReferentielCompetence
     * @example
     * // Get one ReferentielCompetence
     * const referentielCompetence = await prisma.referentielCompetence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReferentielCompetenceFindFirstOrThrowArgs>(args?: SelectSubset<T, ReferentielCompetenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReferentielCompetences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReferentielCompetences
     * const referentielCompetences = await prisma.referentielCompetence.findMany()
     * 
     * // Get first 10 ReferentielCompetences
     * const referentielCompetences = await prisma.referentielCompetence.findMany({ take: 10 })
     * 
     * // Only select the `referentielId`
     * const referentielCompetenceWithReferentielIdOnly = await prisma.referentielCompetence.findMany({ select: { referentielId: true } })
     * 
     */
    findMany<T extends ReferentielCompetenceFindManyArgs>(args?: SelectSubset<T, ReferentielCompetenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReferentielCompetence.
     * @param {ReferentielCompetenceCreateArgs} args - Arguments to create a ReferentielCompetence.
     * @example
     * // Create one ReferentielCompetence
     * const ReferentielCompetence = await prisma.referentielCompetence.create({
     *   data: {
     *     // ... data to create a ReferentielCompetence
     *   }
     * })
     * 
     */
    create<T extends ReferentielCompetenceCreateArgs>(args: SelectSubset<T, ReferentielCompetenceCreateArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReferentielCompetences.
     * @param {ReferentielCompetenceCreateManyArgs} args - Arguments to create many ReferentielCompetences.
     * @example
     * // Create many ReferentielCompetences
     * const referentielCompetence = await prisma.referentielCompetence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReferentielCompetenceCreateManyArgs>(args?: SelectSubset<T, ReferentielCompetenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReferentielCompetence.
     * @param {ReferentielCompetenceDeleteArgs} args - Arguments to delete one ReferentielCompetence.
     * @example
     * // Delete one ReferentielCompetence
     * const ReferentielCompetence = await prisma.referentielCompetence.delete({
     *   where: {
     *     // ... filter to delete one ReferentielCompetence
     *   }
     * })
     * 
     */
    delete<T extends ReferentielCompetenceDeleteArgs>(args: SelectSubset<T, ReferentielCompetenceDeleteArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReferentielCompetence.
     * @param {ReferentielCompetenceUpdateArgs} args - Arguments to update one ReferentielCompetence.
     * @example
     * // Update one ReferentielCompetence
     * const referentielCompetence = await prisma.referentielCompetence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReferentielCompetenceUpdateArgs>(args: SelectSubset<T, ReferentielCompetenceUpdateArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReferentielCompetences.
     * @param {ReferentielCompetenceDeleteManyArgs} args - Arguments to filter ReferentielCompetences to delete.
     * @example
     * // Delete a few ReferentielCompetences
     * const { count } = await prisma.referentielCompetence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReferentielCompetenceDeleteManyArgs>(args?: SelectSubset<T, ReferentielCompetenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReferentielCompetences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReferentielCompetences
     * const referentielCompetence = await prisma.referentielCompetence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReferentielCompetenceUpdateManyArgs>(args: SelectSubset<T, ReferentielCompetenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReferentielCompetence.
     * @param {ReferentielCompetenceUpsertArgs} args - Arguments to update or create a ReferentielCompetence.
     * @example
     * // Update or create a ReferentielCompetence
     * const referentielCompetence = await prisma.referentielCompetence.upsert({
     *   create: {
     *     // ... data to create a ReferentielCompetence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReferentielCompetence we want to update
     *   }
     * })
     */
    upsert<T extends ReferentielCompetenceUpsertArgs>(args: SelectSubset<T, ReferentielCompetenceUpsertArgs<ExtArgs>>): Prisma__ReferentielCompetenceClient<$Result.GetResult<Prisma.$ReferentielCompetencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReferentielCompetences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceCountArgs} args - Arguments to filter ReferentielCompetences to count.
     * @example
     * // Count the number of ReferentielCompetences
     * const count = await prisma.referentielCompetence.count({
     *   where: {
     *     // ... the filter for the ReferentielCompetences we want to count
     *   }
     * })
    **/
    count<T extends ReferentielCompetenceCountArgs>(
      args?: Subset<T, ReferentielCompetenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferentielCompetenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReferentielCompetence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferentielCompetenceAggregateArgs>(args: Subset<T, ReferentielCompetenceAggregateArgs>): Prisma.PrismaPromise<GetReferentielCompetenceAggregateType<T>>

    /**
     * Group by ReferentielCompetence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferentielCompetenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferentielCompetenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferentielCompetenceGroupByArgs['orderBy'] }
        : { orderBy?: ReferentielCompetenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferentielCompetenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferentielCompetenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReferentielCompetence model
   */
  readonly fields: ReferentielCompetenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReferentielCompetence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferentielCompetenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    referentiel<T extends ReferentielDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReferentielDefaultArgs<ExtArgs>>): Prisma__ReferentielClient<$Result.GetResult<Prisma.$ReferentielPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    competence<T extends CompetenceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompetenceDefaultArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReferentielCompetence model
   */
  interface ReferentielCompetenceFieldRefs {
    readonly referentielId: FieldRef<"ReferentielCompetence", 'Int'>
    readonly competenceId: FieldRef<"ReferentielCompetence", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ReferentielCompetence findUnique
   */
  export type ReferentielCompetenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * Filter, which ReferentielCompetence to fetch.
     */
    where: ReferentielCompetenceWhereUniqueInput
  }

  /**
   * ReferentielCompetence findUniqueOrThrow
   */
  export type ReferentielCompetenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * Filter, which ReferentielCompetence to fetch.
     */
    where: ReferentielCompetenceWhereUniqueInput
  }

  /**
   * ReferentielCompetence findFirst
   */
  export type ReferentielCompetenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * Filter, which ReferentielCompetence to fetch.
     */
    where?: ReferentielCompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferentielCompetences to fetch.
     */
    orderBy?: ReferentielCompetenceOrderByWithRelationInput | ReferentielCompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferentielCompetences.
     */
    cursor?: ReferentielCompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferentielCompetences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferentielCompetences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferentielCompetences.
     */
    distinct?: ReferentielCompetenceScalarFieldEnum | ReferentielCompetenceScalarFieldEnum[]
  }

  /**
   * ReferentielCompetence findFirstOrThrow
   */
  export type ReferentielCompetenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * Filter, which ReferentielCompetence to fetch.
     */
    where?: ReferentielCompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferentielCompetences to fetch.
     */
    orderBy?: ReferentielCompetenceOrderByWithRelationInput | ReferentielCompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReferentielCompetences.
     */
    cursor?: ReferentielCompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferentielCompetences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferentielCompetences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReferentielCompetences.
     */
    distinct?: ReferentielCompetenceScalarFieldEnum | ReferentielCompetenceScalarFieldEnum[]
  }

  /**
   * ReferentielCompetence findMany
   */
  export type ReferentielCompetenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * Filter, which ReferentielCompetences to fetch.
     */
    where?: ReferentielCompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReferentielCompetences to fetch.
     */
    orderBy?: ReferentielCompetenceOrderByWithRelationInput | ReferentielCompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReferentielCompetences.
     */
    cursor?: ReferentielCompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReferentielCompetences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReferentielCompetences.
     */
    skip?: number
    distinct?: ReferentielCompetenceScalarFieldEnum | ReferentielCompetenceScalarFieldEnum[]
  }

  /**
   * ReferentielCompetence create
   */
  export type ReferentielCompetenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * The data needed to create a ReferentielCompetence.
     */
    data: XOR<ReferentielCompetenceCreateInput, ReferentielCompetenceUncheckedCreateInput>
  }

  /**
   * ReferentielCompetence createMany
   */
  export type ReferentielCompetenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReferentielCompetences.
     */
    data: ReferentielCompetenceCreateManyInput | ReferentielCompetenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReferentielCompetence update
   */
  export type ReferentielCompetenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * The data needed to update a ReferentielCompetence.
     */
    data: XOR<ReferentielCompetenceUpdateInput, ReferentielCompetenceUncheckedUpdateInput>
    /**
     * Choose, which ReferentielCompetence to update.
     */
    where: ReferentielCompetenceWhereUniqueInput
  }

  /**
   * ReferentielCompetence updateMany
   */
  export type ReferentielCompetenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReferentielCompetences.
     */
    data: XOR<ReferentielCompetenceUpdateManyMutationInput, ReferentielCompetenceUncheckedUpdateManyInput>
    /**
     * Filter which ReferentielCompetences to update
     */
    where?: ReferentielCompetenceWhereInput
    /**
     * Limit how many ReferentielCompetences to update.
     */
    limit?: number
  }

  /**
   * ReferentielCompetence upsert
   */
  export type ReferentielCompetenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * The filter to search for the ReferentielCompetence to update in case it exists.
     */
    where: ReferentielCompetenceWhereUniqueInput
    /**
     * In case the ReferentielCompetence found by the `where` argument doesn't exist, create a new ReferentielCompetence with this data.
     */
    create: XOR<ReferentielCompetenceCreateInput, ReferentielCompetenceUncheckedCreateInput>
    /**
     * In case the ReferentielCompetence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferentielCompetenceUpdateInput, ReferentielCompetenceUncheckedUpdateInput>
  }

  /**
   * ReferentielCompetence delete
   */
  export type ReferentielCompetenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
    /**
     * Filter which ReferentielCompetence to delete.
     */
    where: ReferentielCompetenceWhereUniqueInput
  }

  /**
   * ReferentielCompetence deleteMany
   */
  export type ReferentielCompetenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReferentielCompetences to delete
     */
    where?: ReferentielCompetenceWhereInput
    /**
     * Limit how many ReferentielCompetences to delete.
     */
    limit?: number
  }

  /**
   * ReferentielCompetence without action
   */
  export type ReferentielCompetenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReferentielCompetence
     */
    select?: ReferentielCompetenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReferentielCompetence
     */
    omit?: ReferentielCompetenceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReferentielCompetenceInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    id: number | null
  }

  export type TagSumAggregateOutputType = {
    id: number | null
  }

  export type TagMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type TagMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    id?: true
  }

  export type TagSumAggregateInputType = {
    id?: true
  }

  export type TagMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: number
    nom: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
  }, ExtArgs["result"]["tag"]>



  export type TagSelectScalar = {
    id?: boolean
    nom?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nom", ExtArgs["result"]["tag"]>

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'Int'>
    readonly nom: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const ProfilSortieScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type ProfilSortieScalarFieldEnum = (typeof ProfilSortieScalarFieldEnum)[keyof typeof ProfilSortieScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    profileId: 'profileId',
    profilSortieId: 'profilSortieId',
    referentielId: 'referentielId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PromoScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    referentielId: 'referentielId'
  };

  export type PromoScalarFieldEnum = (typeof PromoScalarFieldEnum)[keyof typeof PromoScalarFieldEnum]


  export const PromoFormateursScalarFieldEnum: {
    promoId: 'promoId',
    userId: 'userId'
  };

  export type PromoFormateursScalarFieldEnum = (typeof PromoFormateursScalarFieldEnum)[keyof typeof PromoFormateursScalarFieldEnum]


  export const NiveauScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type NiveauScalarFieldEnum = (typeof NiveauScalarFieldEnum)[keyof typeof NiveauScalarFieldEnum]


  export const CompetenceScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description'
  };

  export type CompetenceScalarFieldEnum = (typeof CompetenceScalarFieldEnum)[keyof typeof CompetenceScalarFieldEnum]


  export const CompetenceNiveauScalarFieldEnum: {
    competenceId: 'competenceId',
    niveauId: 'niveauId'
  };

  export type CompetenceNiveauScalarFieldEnum = (typeof CompetenceNiveauScalarFieldEnum)[keyof typeof CompetenceNiveauScalarFieldEnum]


  export const ReferentielScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    description: 'description'
  };

  export type ReferentielScalarFieldEnum = (typeof ReferentielScalarFieldEnum)[keyof typeof ReferentielScalarFieldEnum]


  export const ReferentielCompetenceScalarFieldEnum: {
    referentielId: 'referentielId',
    competenceId: 'competenceId'
  };

  export type ReferentielCompetenceScalarFieldEnum = (typeof ReferentielCompetenceScalarFieldEnum)[keyof typeof ReferentielCompetenceScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const ProfileOrderByRelevanceFieldEnum: {
    nom: 'nom'
  };

  export type ProfileOrderByRelevanceFieldEnum = (typeof ProfileOrderByRelevanceFieldEnum)[keyof typeof ProfileOrderByRelevanceFieldEnum]


  export const ProfilSortieOrderByRelevanceFieldEnum: {
    nom: 'nom'
  };

  export type ProfilSortieOrderByRelevanceFieldEnum = (typeof ProfilSortieOrderByRelevanceFieldEnum)[keyof typeof ProfilSortieOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const PromoOrderByRelevanceFieldEnum: {
    nom: 'nom'
  };

  export type PromoOrderByRelevanceFieldEnum = (typeof PromoOrderByRelevanceFieldEnum)[keyof typeof PromoOrderByRelevanceFieldEnum]


  export const NiveauOrderByRelevanceFieldEnum: {
    nom: 'nom'
  };

  export type NiveauOrderByRelevanceFieldEnum = (typeof NiveauOrderByRelevanceFieldEnum)[keyof typeof NiveauOrderByRelevanceFieldEnum]


  export const CompetenceOrderByRelevanceFieldEnum: {
    nom: 'nom',
    description: 'description'
  };

  export type CompetenceOrderByRelevanceFieldEnum = (typeof CompetenceOrderByRelevanceFieldEnum)[keyof typeof CompetenceOrderByRelevanceFieldEnum]


  export const ReferentielOrderByRelevanceFieldEnum: {
    nom: 'nom',
    description: 'description'
  };

  export type ReferentielOrderByRelevanceFieldEnum = (typeof ReferentielOrderByRelevanceFieldEnum)[keyof typeof ReferentielOrderByRelevanceFieldEnum]


  export const TagOrderByRelevanceFieldEnum: {
    nom: 'nom'
  };

  export type TagOrderByRelevanceFieldEnum = (typeof TagOrderByRelevanceFieldEnum)[keyof typeof TagOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: IntFilter<"Profile"> | number
    nom?: StringFilter<"Profile"> | string
    users?: UserListRelationFilter
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    users?: UserOrderByRelationAggregateInput
    _relevance?: ProfileOrderByRelevanceInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "nom">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _avg?: ProfileAvgOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
    _sum?: ProfileSumOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profile"> | number
    nom?: StringWithAggregatesFilter<"Profile"> | string
  }

  export type ProfilSortieWhereInput = {
    AND?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    OR?: ProfilSortieWhereInput[]
    NOT?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    id?: IntFilter<"ProfilSortie"> | number
    nom?: StringFilter<"ProfilSortie"> | string
    users?: UserListRelationFilter
  }

  export type ProfilSortieOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    users?: UserOrderByRelationAggregateInput
    _relevance?: ProfilSortieOrderByRelevanceInput
  }

  export type ProfilSortieWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    OR?: ProfilSortieWhereInput[]
    NOT?: ProfilSortieWhereInput | ProfilSortieWhereInput[]
    users?: UserListRelationFilter
  }, "id" | "nom">

  export type ProfilSortieOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: ProfilSortieCountOrderByAggregateInput
    _avg?: ProfilSortieAvgOrderByAggregateInput
    _max?: ProfilSortieMaxOrderByAggregateInput
    _min?: ProfilSortieMinOrderByAggregateInput
    _sum?: ProfilSortieSumOrderByAggregateInput
  }

  export type ProfilSortieScalarWhereWithAggregatesInput = {
    AND?: ProfilSortieScalarWhereWithAggregatesInput | ProfilSortieScalarWhereWithAggregatesInput[]
    OR?: ProfilSortieScalarWhereWithAggregatesInput[]
    NOT?: ProfilSortieScalarWhereWithAggregatesInput | ProfilSortieScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfilSortie"> | number
    nom?: StringWithAggregatesFilter<"ProfilSortie"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profileId?: IntFilter<"User"> | number
    profilSortieId?: IntNullableFilter<"User"> | number | null
    referentielId?: IntNullableFilter<"User"> | number | null
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    profilSortie?: XOR<ProfilSortieNullableScalarRelationFilter, ProfilSortieWhereInput> | null
    referentiel?: XOR<ReferentielNullableScalarRelationFilter, ReferentielWhereInput> | null
    promosFormateur?: PromoFormateursListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrderInput | SortOrder
    referentielId?: SortOrderInput | SortOrder
    profile?: ProfileOrderByWithRelationInput
    profilSortie?: ProfilSortieOrderByWithRelationInput
    referentiel?: ReferentielOrderByWithRelationInput
    promosFormateur?: PromoFormateursOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profileId?: IntFilter<"User"> | number
    profilSortieId?: IntNullableFilter<"User"> | number | null
    referentielId?: IntNullableFilter<"User"> | number | null
    profile?: XOR<ProfileScalarRelationFilter, ProfileWhereInput>
    profilSortie?: XOR<ProfilSortieNullableScalarRelationFilter, ProfilSortieWhereInput> | null
    referentiel?: XOR<ReferentielNullableScalarRelationFilter, ReferentielWhereInput> | null
    promosFormateur?: PromoFormateursListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrderInput | SortOrder
    referentielId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    profileId?: IntWithAggregatesFilter<"User"> | number
    profilSortieId?: IntNullableWithAggregatesFilter<"User"> | number | null
    referentielId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type PromoWhereInput = {
    AND?: PromoWhereInput | PromoWhereInput[]
    OR?: PromoWhereInput[]
    NOT?: PromoWhereInput | PromoWhereInput[]
    id?: IntFilter<"Promo"> | number
    nom?: StringFilter<"Promo"> | string
    dateDebut?: DateTimeFilter<"Promo"> | Date | string
    dateFin?: DateTimeFilter<"Promo"> | Date | string
    referentielId?: IntNullableFilter<"Promo"> | number | null
    referentiel?: XOR<ReferentielNullableScalarRelationFilter, ReferentielWhereInput> | null
    formateurs?: PromoFormateursListRelationFilter
  }

  export type PromoOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    referentielId?: SortOrderInput | SortOrder
    referentiel?: ReferentielOrderByWithRelationInput
    formateurs?: PromoFormateursOrderByRelationAggregateInput
    _relevance?: PromoOrderByRelevanceInput
  }

  export type PromoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: PromoWhereInput | PromoWhereInput[]
    OR?: PromoWhereInput[]
    NOT?: PromoWhereInput | PromoWhereInput[]
    dateDebut?: DateTimeFilter<"Promo"> | Date | string
    dateFin?: DateTimeFilter<"Promo"> | Date | string
    referentielId?: IntNullableFilter<"Promo"> | number | null
    referentiel?: XOR<ReferentielNullableScalarRelationFilter, ReferentielWhereInput> | null
    formateurs?: PromoFormateursListRelationFilter
  }, "id" | "nom">

  export type PromoOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    referentielId?: SortOrderInput | SortOrder
    _count?: PromoCountOrderByAggregateInput
    _avg?: PromoAvgOrderByAggregateInput
    _max?: PromoMaxOrderByAggregateInput
    _min?: PromoMinOrderByAggregateInput
    _sum?: PromoSumOrderByAggregateInput
  }

  export type PromoScalarWhereWithAggregatesInput = {
    AND?: PromoScalarWhereWithAggregatesInput | PromoScalarWhereWithAggregatesInput[]
    OR?: PromoScalarWhereWithAggregatesInput[]
    NOT?: PromoScalarWhereWithAggregatesInput | PromoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Promo"> | number
    nom?: StringWithAggregatesFilter<"Promo"> | string
    dateDebut?: DateTimeWithAggregatesFilter<"Promo"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"Promo"> | Date | string
    referentielId?: IntNullableWithAggregatesFilter<"Promo"> | number | null
  }

  export type PromoFormateursWhereInput = {
    AND?: PromoFormateursWhereInput | PromoFormateursWhereInput[]
    OR?: PromoFormateursWhereInput[]
    NOT?: PromoFormateursWhereInput | PromoFormateursWhereInput[]
    promoId?: IntFilter<"PromoFormateurs"> | number
    userId?: IntFilter<"PromoFormateurs"> | number
    promo?: XOR<PromoScalarRelationFilter, PromoWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PromoFormateursOrderByWithRelationInput = {
    promoId?: SortOrder
    userId?: SortOrder
    promo?: PromoOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PromoFormateursWhereUniqueInput = Prisma.AtLeast<{
    promoId_userId?: PromoFormateursPromoIdUserIdCompoundUniqueInput
    AND?: PromoFormateursWhereInput | PromoFormateursWhereInput[]
    OR?: PromoFormateursWhereInput[]
    NOT?: PromoFormateursWhereInput | PromoFormateursWhereInput[]
    promoId?: IntFilter<"PromoFormateurs"> | number
    userId?: IntFilter<"PromoFormateurs"> | number
    promo?: XOR<PromoScalarRelationFilter, PromoWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "promoId_userId">

  export type PromoFormateursOrderByWithAggregationInput = {
    promoId?: SortOrder
    userId?: SortOrder
    _count?: PromoFormateursCountOrderByAggregateInput
    _avg?: PromoFormateursAvgOrderByAggregateInput
    _max?: PromoFormateursMaxOrderByAggregateInput
    _min?: PromoFormateursMinOrderByAggregateInput
    _sum?: PromoFormateursSumOrderByAggregateInput
  }

  export type PromoFormateursScalarWhereWithAggregatesInput = {
    AND?: PromoFormateursScalarWhereWithAggregatesInput | PromoFormateursScalarWhereWithAggregatesInput[]
    OR?: PromoFormateursScalarWhereWithAggregatesInput[]
    NOT?: PromoFormateursScalarWhereWithAggregatesInput | PromoFormateursScalarWhereWithAggregatesInput[]
    promoId?: IntWithAggregatesFilter<"PromoFormateurs"> | number
    userId?: IntWithAggregatesFilter<"PromoFormateurs"> | number
  }

  export type NiveauWhereInput = {
    AND?: NiveauWhereInput | NiveauWhereInput[]
    OR?: NiveauWhereInput[]
    NOT?: NiveauWhereInput | NiveauWhereInput[]
    id?: IntFilter<"Niveau"> | number
    nom?: StringFilter<"Niveau"> | string
    competences?: CompetenceNiveauListRelationFilter
  }

  export type NiveauOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    competences?: CompetenceNiveauOrderByRelationAggregateInput
    _relevance?: NiveauOrderByRelevanceInput
  }

  export type NiveauWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: NiveauWhereInput | NiveauWhereInput[]
    OR?: NiveauWhereInput[]
    NOT?: NiveauWhereInput | NiveauWhereInput[]
    competences?: CompetenceNiveauListRelationFilter
  }, "id" | "nom">

  export type NiveauOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: NiveauCountOrderByAggregateInput
    _avg?: NiveauAvgOrderByAggregateInput
    _max?: NiveauMaxOrderByAggregateInput
    _min?: NiveauMinOrderByAggregateInput
    _sum?: NiveauSumOrderByAggregateInput
  }

  export type NiveauScalarWhereWithAggregatesInput = {
    AND?: NiveauScalarWhereWithAggregatesInput | NiveauScalarWhereWithAggregatesInput[]
    OR?: NiveauScalarWhereWithAggregatesInput[]
    NOT?: NiveauScalarWhereWithAggregatesInput | NiveauScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Niveau"> | number
    nom?: StringWithAggregatesFilter<"Niveau"> | string
  }

  export type CompetenceWhereInput = {
    AND?: CompetenceWhereInput | CompetenceWhereInput[]
    OR?: CompetenceWhereInput[]
    NOT?: CompetenceWhereInput | CompetenceWhereInput[]
    id?: IntFilter<"Competence"> | number
    nom?: StringFilter<"Competence"> | string
    description?: StringNullableFilter<"Competence"> | string | null
    niveaux?: CompetenceNiveauListRelationFilter
    referentiels?: ReferentielCompetenceListRelationFilter
  }

  export type CompetenceOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    niveaux?: CompetenceNiveauOrderByRelationAggregateInput
    referentiels?: ReferentielCompetenceOrderByRelationAggregateInput
    _relevance?: CompetenceOrderByRelevanceInput
  }

  export type CompetenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: CompetenceWhereInput | CompetenceWhereInput[]
    OR?: CompetenceWhereInput[]
    NOT?: CompetenceWhereInput | CompetenceWhereInput[]
    description?: StringNullableFilter<"Competence"> | string | null
    niveaux?: CompetenceNiveauListRelationFilter
    referentiels?: ReferentielCompetenceListRelationFilter
  }, "id" | "nom">

  export type CompetenceOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: CompetenceCountOrderByAggregateInput
    _avg?: CompetenceAvgOrderByAggregateInput
    _max?: CompetenceMaxOrderByAggregateInput
    _min?: CompetenceMinOrderByAggregateInput
    _sum?: CompetenceSumOrderByAggregateInput
  }

  export type CompetenceScalarWhereWithAggregatesInput = {
    AND?: CompetenceScalarWhereWithAggregatesInput | CompetenceScalarWhereWithAggregatesInput[]
    OR?: CompetenceScalarWhereWithAggregatesInput[]
    NOT?: CompetenceScalarWhereWithAggregatesInput | CompetenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Competence"> | number
    nom?: StringWithAggregatesFilter<"Competence"> | string
    description?: StringNullableWithAggregatesFilter<"Competence"> | string | null
  }

  export type CompetenceNiveauWhereInput = {
    AND?: CompetenceNiveauWhereInput | CompetenceNiveauWhereInput[]
    OR?: CompetenceNiveauWhereInput[]
    NOT?: CompetenceNiveauWhereInput | CompetenceNiveauWhereInput[]
    competenceId?: IntFilter<"CompetenceNiveau"> | number
    niveauId?: IntFilter<"CompetenceNiveau"> | number
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
    niveau?: XOR<NiveauScalarRelationFilter, NiveauWhereInput>
  }

  export type CompetenceNiveauOrderByWithRelationInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
    competence?: CompetenceOrderByWithRelationInput
    niveau?: NiveauOrderByWithRelationInput
  }

  export type CompetenceNiveauWhereUniqueInput = Prisma.AtLeast<{
    competenceId_niveauId?: CompetenceNiveauCompetenceIdNiveauIdCompoundUniqueInput
    AND?: CompetenceNiveauWhereInput | CompetenceNiveauWhereInput[]
    OR?: CompetenceNiveauWhereInput[]
    NOT?: CompetenceNiveauWhereInput | CompetenceNiveauWhereInput[]
    competenceId?: IntFilter<"CompetenceNiveau"> | number
    niveauId?: IntFilter<"CompetenceNiveau"> | number
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
    niveau?: XOR<NiveauScalarRelationFilter, NiveauWhereInput>
  }, "competenceId_niveauId">

  export type CompetenceNiveauOrderByWithAggregationInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
    _count?: CompetenceNiveauCountOrderByAggregateInput
    _avg?: CompetenceNiveauAvgOrderByAggregateInput
    _max?: CompetenceNiveauMaxOrderByAggregateInput
    _min?: CompetenceNiveauMinOrderByAggregateInput
    _sum?: CompetenceNiveauSumOrderByAggregateInput
  }

  export type CompetenceNiveauScalarWhereWithAggregatesInput = {
    AND?: CompetenceNiveauScalarWhereWithAggregatesInput | CompetenceNiveauScalarWhereWithAggregatesInput[]
    OR?: CompetenceNiveauScalarWhereWithAggregatesInput[]
    NOT?: CompetenceNiveauScalarWhereWithAggregatesInput | CompetenceNiveauScalarWhereWithAggregatesInput[]
    competenceId?: IntWithAggregatesFilter<"CompetenceNiveau"> | number
    niveauId?: IntWithAggregatesFilter<"CompetenceNiveau"> | number
  }

  export type ReferentielWhereInput = {
    AND?: ReferentielWhereInput | ReferentielWhereInput[]
    OR?: ReferentielWhereInput[]
    NOT?: ReferentielWhereInput | ReferentielWhereInput[]
    id?: IntFilter<"Referentiel"> | number
    nom?: StringFilter<"Referentiel"> | string
    description?: StringNullableFilter<"Referentiel"> | string | null
    competences?: ReferentielCompetenceListRelationFilter
    users?: UserListRelationFilter
    promos?: PromoListRelationFilter
  }

  export type ReferentielOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    competences?: ReferentielCompetenceOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    promos?: PromoOrderByRelationAggregateInput
    _relevance?: ReferentielOrderByRelevanceInput
  }

  export type ReferentielWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: ReferentielWhereInput | ReferentielWhereInput[]
    OR?: ReferentielWhereInput[]
    NOT?: ReferentielWhereInput | ReferentielWhereInput[]
    description?: StringNullableFilter<"Referentiel"> | string | null
    competences?: ReferentielCompetenceListRelationFilter
    users?: UserListRelationFilter
    promos?: PromoListRelationFilter
  }, "id" | "nom">

  export type ReferentielOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: ReferentielCountOrderByAggregateInput
    _avg?: ReferentielAvgOrderByAggregateInput
    _max?: ReferentielMaxOrderByAggregateInput
    _min?: ReferentielMinOrderByAggregateInput
    _sum?: ReferentielSumOrderByAggregateInput
  }

  export type ReferentielScalarWhereWithAggregatesInput = {
    AND?: ReferentielScalarWhereWithAggregatesInput | ReferentielScalarWhereWithAggregatesInput[]
    OR?: ReferentielScalarWhereWithAggregatesInput[]
    NOT?: ReferentielScalarWhereWithAggregatesInput | ReferentielScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Referentiel"> | number
    nom?: StringWithAggregatesFilter<"Referentiel"> | string
    description?: StringNullableWithAggregatesFilter<"Referentiel"> | string | null
  }

  export type ReferentielCompetenceWhereInput = {
    AND?: ReferentielCompetenceWhereInput | ReferentielCompetenceWhereInput[]
    OR?: ReferentielCompetenceWhereInput[]
    NOT?: ReferentielCompetenceWhereInput | ReferentielCompetenceWhereInput[]
    referentielId?: IntFilter<"ReferentielCompetence"> | number
    competenceId?: IntFilter<"ReferentielCompetence"> | number
    referentiel?: XOR<ReferentielScalarRelationFilter, ReferentielWhereInput>
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
  }

  export type ReferentielCompetenceOrderByWithRelationInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
    referentiel?: ReferentielOrderByWithRelationInput
    competence?: CompetenceOrderByWithRelationInput
  }

  export type ReferentielCompetenceWhereUniqueInput = Prisma.AtLeast<{
    referentielId_competenceId?: ReferentielCompetenceReferentielIdCompetenceIdCompoundUniqueInput
    AND?: ReferentielCompetenceWhereInput | ReferentielCompetenceWhereInput[]
    OR?: ReferentielCompetenceWhereInput[]
    NOT?: ReferentielCompetenceWhereInput | ReferentielCompetenceWhereInput[]
    referentielId?: IntFilter<"ReferentielCompetence"> | number
    competenceId?: IntFilter<"ReferentielCompetence"> | number
    referentiel?: XOR<ReferentielScalarRelationFilter, ReferentielWhereInput>
    competence?: XOR<CompetenceScalarRelationFilter, CompetenceWhereInput>
  }, "referentielId_competenceId">

  export type ReferentielCompetenceOrderByWithAggregationInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
    _count?: ReferentielCompetenceCountOrderByAggregateInput
    _avg?: ReferentielCompetenceAvgOrderByAggregateInput
    _max?: ReferentielCompetenceMaxOrderByAggregateInput
    _min?: ReferentielCompetenceMinOrderByAggregateInput
    _sum?: ReferentielCompetenceSumOrderByAggregateInput
  }

  export type ReferentielCompetenceScalarWhereWithAggregatesInput = {
    AND?: ReferentielCompetenceScalarWhereWithAggregatesInput | ReferentielCompetenceScalarWhereWithAggregatesInput[]
    OR?: ReferentielCompetenceScalarWhereWithAggregatesInput[]
    NOT?: ReferentielCompetenceScalarWhereWithAggregatesInput | ReferentielCompetenceScalarWhereWithAggregatesInput[]
    referentielId?: IntWithAggregatesFilter<"ReferentielCompetence"> | number
    competenceId?: IntWithAggregatesFilter<"ReferentielCompetence"> | number
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: IntFilter<"Tag"> | number
    nom?: StringFilter<"Tag"> | string
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    _relevance?: TagOrderByRelevanceInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nom?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
  }, "id" | "nom">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tag"> | number
    nom?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type ProfileCreateInput = {
    nom: string
    users?: UserCreateNestedManyWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: number
    nom: string
    users?: UserUncheckedCreateNestedManyWithoutProfileInput
  }

  export type ProfileUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutProfileNestedInput
  }

  export type ProfileCreateManyInput = {
    id?: number
    nom: string
  }

  export type ProfileUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilSortieCreateInput = {
    nom: string
    users?: UserCreateNestedManyWithoutProfilSortieInput
  }

  export type ProfilSortieUncheckedCreateInput = {
    id?: number
    nom: string
    users?: UserUncheckedCreateNestedManyWithoutProfilSortieInput
  }

  export type ProfilSortieUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutProfilSortieNestedInput
  }

  export type ProfilSortieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutProfilSortieNestedInput
  }

  export type ProfilSortieCreateManyInput = {
    id?: number
    nom: string
  }

  export type ProfilSortieUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilSortieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    password: string
    profile: ProfileCreateNestedOneWithoutUsersInput
    profilSortie?: ProfilSortieCreateNestedOneWithoutUsersInput
    referentiel?: ReferentielCreateNestedOneWithoutUsersInput
    promosFormateur?: PromoFormateursCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    profilSortieId?: number | null
    referentielId?: number | null
    promosFormateur?: PromoFormateursUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    profilSortie?: ProfilSortieUpdateOneWithoutUsersNestedInput
    referentiel?: ReferentielUpdateOneWithoutUsersNestedInput
    promosFormateur?: PromoFormateursUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
    promosFormateur?: PromoFormateursUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    profilSortieId?: number | null
    referentielId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromoCreateInput = {
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    referentiel?: ReferentielCreateNestedOneWithoutPromosInput
    formateurs?: PromoFormateursCreateNestedManyWithoutPromoInput
  }

  export type PromoUncheckedCreateInput = {
    id?: number
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    referentielId?: number | null
    formateurs?: PromoFormateursUncheckedCreateNestedManyWithoutPromoInput
  }

  export type PromoUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    referentiel?: ReferentielUpdateOneWithoutPromosNestedInput
    formateurs?: PromoFormateursUpdateManyWithoutPromoNestedInput
  }

  export type PromoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
    formateurs?: PromoFormateursUncheckedUpdateManyWithoutPromoNestedInput
  }

  export type PromoCreateManyInput = {
    id?: number
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    referentielId?: number | null
  }

  export type PromoUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromoFormateursCreateInput = {
    promo: PromoCreateNestedOneWithoutFormateursInput
    user: UserCreateNestedOneWithoutPromosFormateurInput
  }

  export type PromoFormateursUncheckedCreateInput = {
    promoId: number
    userId: number
  }

  export type PromoFormateursUpdateInput = {
    promo?: PromoUpdateOneRequiredWithoutFormateursNestedInput
    user?: UserUpdateOneRequiredWithoutPromosFormateurNestedInput
  }

  export type PromoFormateursUncheckedUpdateInput = {
    promoId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PromoFormateursCreateManyInput = {
    promoId: number
    userId: number
  }

  export type PromoFormateursUpdateManyMutationInput = {

  }

  export type PromoFormateursUncheckedUpdateManyInput = {
    promoId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type NiveauCreateInput = {
    nom: string
    competences?: CompetenceNiveauCreateNestedManyWithoutNiveauInput
  }

  export type NiveauUncheckedCreateInput = {
    id?: number
    nom: string
    competences?: CompetenceNiveauUncheckedCreateNestedManyWithoutNiveauInput
  }

  export type NiveauUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    competences?: CompetenceNiveauUpdateManyWithoutNiveauNestedInput
  }

  export type NiveauUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    competences?: CompetenceNiveauUncheckedUpdateManyWithoutNiveauNestedInput
  }

  export type NiveauCreateManyInput = {
    id?: number
    nom: string
  }

  export type NiveauUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type NiveauUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CompetenceCreateInput = {
    nom: string
    description?: string | null
    niveaux?: CompetenceNiveauCreateNestedManyWithoutCompetenceInput
    referentiels?: ReferentielCompetenceCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    niveaux?: CompetenceNiveauUncheckedCreateNestedManyWithoutCompetenceInput
    referentiels?: ReferentielCompetenceUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: CompetenceNiveauUpdateManyWithoutCompetenceNestedInput
    referentiels?: ReferentielCompetenceUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: CompetenceNiveauUncheckedUpdateManyWithoutCompetenceNestedInput
    referentiels?: ReferentielCompetenceUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
  }

  export type CompetenceUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompetenceNiveauCreateInput = {
    competence: CompetenceCreateNestedOneWithoutNiveauxInput
    niveau: NiveauCreateNestedOneWithoutCompetencesInput
  }

  export type CompetenceNiveauUncheckedCreateInput = {
    competenceId: number
    niveauId: number
  }

  export type CompetenceNiveauUpdateInput = {
    competence?: CompetenceUpdateOneRequiredWithoutNiveauxNestedInput
    niveau?: NiveauUpdateOneRequiredWithoutCompetencesNestedInput
  }

  export type CompetenceNiveauUncheckedUpdateInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
    niveauId?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceNiveauCreateManyInput = {
    competenceId: number
    niveauId: number
  }

  export type CompetenceNiveauUpdateManyMutationInput = {

  }

  export type CompetenceNiveauUncheckedUpdateManyInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
    niveauId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferentielCreateInput = {
    nom: string
    description?: string | null
    competences?: ReferentielCompetenceCreateNestedManyWithoutReferentielInput
    users?: UserCreateNestedManyWithoutReferentielInput
    promos?: PromoCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUncheckedCreateInput = {
    id?: number
    nom: string
    description?: string | null
    competences?: ReferentielCompetenceUncheckedCreateNestedManyWithoutReferentielInput
    users?: UserUncheckedCreateNestedManyWithoutReferentielInput
    promos?: PromoUncheckedCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competences?: ReferentielCompetenceUpdateManyWithoutReferentielNestedInput
    users?: UserUpdateManyWithoutReferentielNestedInput
    promos?: PromoUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competences?: ReferentielCompetenceUncheckedUpdateManyWithoutReferentielNestedInput
    users?: UserUncheckedUpdateManyWithoutReferentielNestedInput
    promos?: PromoUncheckedUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielCreateManyInput = {
    id?: number
    nom: string
    description?: string | null
  }

  export type ReferentielUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferentielUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReferentielCompetenceCreateInput = {
    referentiel: ReferentielCreateNestedOneWithoutCompetencesInput
    competence: CompetenceCreateNestedOneWithoutReferentielsInput
  }

  export type ReferentielCompetenceUncheckedCreateInput = {
    referentielId: number
    competenceId: number
  }

  export type ReferentielCompetenceUpdateInput = {
    referentiel?: ReferentielUpdateOneRequiredWithoutCompetencesNestedInput
    competence?: CompetenceUpdateOneRequiredWithoutReferentielsNestedInput
  }

  export type ReferentielCompetenceUncheckedUpdateInput = {
    referentielId?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferentielCompetenceCreateManyInput = {
    referentielId: number
    competenceId: number
  }

  export type ReferentielCompetenceUpdateManyMutationInput = {

  }

  export type ReferentielCompetenceUncheckedUpdateManyInput = {
    referentielId?: IntFieldUpdateOperationsInput | number
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateInput = {
    nom: string
  }

  export type TagUncheckedCreateInput = {
    id?: number
    nom: string
  }

  export type TagUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateManyInput = {
    id?: number
    nom: string
  }

  export type TagUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileOrderByRelevanceInput = {
    fields: ProfileOrderByRelevanceFieldEnum | ProfileOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type ProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type ProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ProfilSortieOrderByRelevanceInput = {
    fields: ProfilSortieOrderByRelevanceFieldEnum | ProfilSortieOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProfilSortieCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type ProfilSortieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfilSortieMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type ProfilSortieMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type ProfilSortieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProfileScalarRelationFilter = {
    is?: ProfileWhereInput
    isNot?: ProfileWhereInput
  }

  export type ProfilSortieNullableScalarRelationFilter = {
    is?: ProfilSortieWhereInput | null
    isNot?: ProfilSortieWhereInput | null
  }

  export type ReferentielNullableScalarRelationFilter = {
    is?: ReferentielWhereInput | null
    isNot?: ReferentielWhereInput | null
  }

  export type PromoFormateursListRelationFilter = {
    every?: PromoFormateursWhereInput
    some?: PromoFormateursWhereInput
    none?: PromoFormateursWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PromoFormateursOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrder
    referentielId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrder
    referentielId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrder
    referentielId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrder
    referentielId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    profileId?: SortOrder
    profilSortieId?: SortOrder
    referentielId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PromoOrderByRelevanceInput = {
    fields: PromoOrderByRelevanceFieldEnum | PromoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PromoCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    referentielId?: SortOrder
  }

  export type PromoAvgOrderByAggregateInput = {
    id?: SortOrder
    referentielId?: SortOrder
  }

  export type PromoMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    referentielId?: SortOrder
  }

  export type PromoMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    referentielId?: SortOrder
  }

  export type PromoSumOrderByAggregateInput = {
    id?: SortOrder
    referentielId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PromoScalarRelationFilter = {
    is?: PromoWhereInput
    isNot?: PromoWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PromoFormateursPromoIdUserIdCompoundUniqueInput = {
    promoId: number
    userId: number
  }

  export type PromoFormateursCountOrderByAggregateInput = {
    promoId?: SortOrder
    userId?: SortOrder
  }

  export type PromoFormateursAvgOrderByAggregateInput = {
    promoId?: SortOrder
    userId?: SortOrder
  }

  export type PromoFormateursMaxOrderByAggregateInput = {
    promoId?: SortOrder
    userId?: SortOrder
  }

  export type PromoFormateursMinOrderByAggregateInput = {
    promoId?: SortOrder
    userId?: SortOrder
  }

  export type PromoFormateursSumOrderByAggregateInput = {
    promoId?: SortOrder
    userId?: SortOrder
  }

  export type CompetenceNiveauListRelationFilter = {
    every?: CompetenceNiveauWhereInput
    some?: CompetenceNiveauWhereInput
    none?: CompetenceNiveauWhereInput
  }

  export type CompetenceNiveauOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NiveauOrderByRelevanceInput = {
    fields: NiveauOrderByRelevanceFieldEnum | NiveauOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NiveauCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type NiveauAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NiveauMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type NiveauMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type NiveauSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ReferentielCompetenceListRelationFilter = {
    every?: ReferentielCompetenceWhereInput
    some?: ReferentielCompetenceWhereInput
    none?: ReferentielCompetenceWhereInput
  }

  export type ReferentielCompetenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompetenceOrderByRelevanceInput = {
    fields: CompetenceOrderByRelevanceFieldEnum | CompetenceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CompetenceCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
  }

  export type CompetenceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompetenceMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
  }

  export type CompetenceMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
  }

  export type CompetenceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CompetenceScalarRelationFilter = {
    is?: CompetenceWhereInput
    isNot?: CompetenceWhereInput
  }

  export type NiveauScalarRelationFilter = {
    is?: NiveauWhereInput
    isNot?: NiveauWhereInput
  }

  export type CompetenceNiveauCompetenceIdNiveauIdCompoundUniqueInput = {
    competenceId: number
    niveauId: number
  }

  export type CompetenceNiveauCountOrderByAggregateInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
  }

  export type CompetenceNiveauAvgOrderByAggregateInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
  }

  export type CompetenceNiveauMaxOrderByAggregateInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
  }

  export type CompetenceNiveauMinOrderByAggregateInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
  }

  export type CompetenceNiveauSumOrderByAggregateInput = {
    competenceId?: SortOrder
    niveauId?: SortOrder
  }

  export type PromoListRelationFilter = {
    every?: PromoWhereInput
    some?: PromoWhereInput
    none?: PromoWhereInput
  }

  export type PromoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferentielOrderByRelevanceInput = {
    fields: ReferentielOrderByRelevanceFieldEnum | ReferentielOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReferentielCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
  }

  export type ReferentielAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReferentielMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
  }

  export type ReferentielMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    description?: SortOrder
  }

  export type ReferentielSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReferentielScalarRelationFilter = {
    is?: ReferentielWhereInput
    isNot?: ReferentielWhereInput
  }

  export type ReferentielCompetenceReferentielIdCompetenceIdCompoundUniqueInput = {
    referentielId: number
    competenceId: number
  }

  export type ReferentielCompetenceCountOrderByAggregateInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
  }

  export type ReferentielCompetenceAvgOrderByAggregateInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
  }

  export type ReferentielCompetenceMaxOrderByAggregateInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
  }

  export type ReferentielCompetenceMinOrderByAggregateInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
  }

  export type ReferentielCompetenceSumOrderByAggregateInput = {
    referentielId?: SortOrder
    competenceId?: SortOrder
  }

  export type TagOrderByRelevanceInput = {
    fields: TagOrderByRelevanceFieldEnum | TagOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCreateNestedManyWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfileInput | UserUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfileInput | UserUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfileInput | UserUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput> | UserCreateWithoutProfileInput[] | UserUncheckedCreateWithoutProfileInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput | UserCreateOrConnectWithoutProfileInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfileInput | UserUpsertWithWhereUniqueWithoutProfileInput[]
    createMany?: UserCreateManyProfileInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfileInput | UserUpdateWithWhereUniqueWithoutProfileInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfileInput | UserUpdateManyWithWhereWithoutProfileInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutProfilSortieInput = {
    create?: XOR<UserCreateWithoutProfilSortieInput, UserUncheckedCreateWithoutProfilSortieInput> | UserCreateWithoutProfilSortieInput[] | UserUncheckedCreateWithoutProfilSortieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilSortieInput | UserCreateOrConnectWithoutProfilSortieInput[]
    createMany?: UserCreateManyProfilSortieInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutProfilSortieInput = {
    create?: XOR<UserCreateWithoutProfilSortieInput, UserUncheckedCreateWithoutProfilSortieInput> | UserCreateWithoutProfilSortieInput[] | UserUncheckedCreateWithoutProfilSortieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilSortieInput | UserCreateOrConnectWithoutProfilSortieInput[]
    createMany?: UserCreateManyProfilSortieInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutProfilSortieNestedInput = {
    create?: XOR<UserCreateWithoutProfilSortieInput, UserUncheckedCreateWithoutProfilSortieInput> | UserCreateWithoutProfilSortieInput[] | UserUncheckedCreateWithoutProfilSortieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilSortieInput | UserCreateOrConnectWithoutProfilSortieInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfilSortieInput | UserUpsertWithWhereUniqueWithoutProfilSortieInput[]
    createMany?: UserCreateManyProfilSortieInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfilSortieInput | UserUpdateWithWhereUniqueWithoutProfilSortieInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfilSortieInput | UserUpdateManyWithWhereWithoutProfilSortieInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutProfilSortieNestedInput = {
    create?: XOR<UserCreateWithoutProfilSortieInput, UserUncheckedCreateWithoutProfilSortieInput> | UserCreateWithoutProfilSortieInput[] | UserUncheckedCreateWithoutProfilSortieInput[]
    connectOrCreate?: UserCreateOrConnectWithoutProfilSortieInput | UserCreateOrConnectWithoutProfilSortieInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutProfilSortieInput | UserUpsertWithWhereUniqueWithoutProfilSortieInput[]
    createMany?: UserCreateManyProfilSortieInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutProfilSortieInput | UserUpdateWithWhereUniqueWithoutProfilSortieInput[]
    updateMany?: UserUpdateManyWithWhereWithoutProfilSortieInput | UserUpdateManyWithWhereWithoutProfilSortieInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProfileCreateNestedOneWithoutUsersInput = {
    create?: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUsersInput
    connect?: ProfileWhereUniqueInput
  }

  export type ProfilSortieCreateNestedOneWithoutUsersInput = {
    create?: XOR<ProfilSortieCreateWithoutUsersInput, ProfilSortieUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfilSortieCreateOrConnectWithoutUsersInput
    connect?: ProfilSortieWhereUniqueInput
  }

  export type ReferentielCreateNestedOneWithoutUsersInput = {
    create?: XOR<ReferentielCreateWithoutUsersInput, ReferentielUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutUsersInput
    connect?: ReferentielWhereUniqueInput
  }

  export type PromoFormateursCreateNestedManyWithoutUserInput = {
    create?: XOR<PromoFormateursCreateWithoutUserInput, PromoFormateursUncheckedCreateWithoutUserInput> | PromoFormateursCreateWithoutUserInput[] | PromoFormateursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutUserInput | PromoFormateursCreateOrConnectWithoutUserInput[]
    createMany?: PromoFormateursCreateManyUserInputEnvelope
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
  }

  export type PromoFormateursUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PromoFormateursCreateWithoutUserInput, PromoFormateursUncheckedCreateWithoutUserInput> | PromoFormateursCreateWithoutUserInput[] | PromoFormateursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutUserInput | PromoFormateursCreateOrConnectWithoutUserInput[]
    createMany?: PromoFormateursCreateManyUserInputEnvelope
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
  }

  export type ProfileUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUsersInput
    upsert?: ProfileUpsertWithoutUsersInput
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUsersInput, ProfileUpdateWithoutUsersInput>, ProfileUncheckedUpdateWithoutUsersInput>
  }

  export type ProfilSortieUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ProfilSortieCreateWithoutUsersInput, ProfilSortieUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ProfilSortieCreateOrConnectWithoutUsersInput
    upsert?: ProfilSortieUpsertWithoutUsersInput
    disconnect?: ProfilSortieWhereInput | boolean
    delete?: ProfilSortieWhereInput | boolean
    connect?: ProfilSortieWhereUniqueInput
    update?: XOR<XOR<ProfilSortieUpdateToOneWithWhereWithoutUsersInput, ProfilSortieUpdateWithoutUsersInput>, ProfilSortieUncheckedUpdateWithoutUsersInput>
  }

  export type ReferentielUpdateOneWithoutUsersNestedInput = {
    create?: XOR<ReferentielCreateWithoutUsersInput, ReferentielUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutUsersInput
    upsert?: ReferentielUpsertWithoutUsersInput
    disconnect?: ReferentielWhereInput | boolean
    delete?: ReferentielWhereInput | boolean
    connect?: ReferentielWhereUniqueInput
    update?: XOR<XOR<ReferentielUpdateToOneWithWhereWithoutUsersInput, ReferentielUpdateWithoutUsersInput>, ReferentielUncheckedUpdateWithoutUsersInput>
  }

  export type PromoFormateursUpdateManyWithoutUserNestedInput = {
    create?: XOR<PromoFormateursCreateWithoutUserInput, PromoFormateursUncheckedCreateWithoutUserInput> | PromoFormateursCreateWithoutUserInput[] | PromoFormateursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutUserInput | PromoFormateursCreateOrConnectWithoutUserInput[]
    upsert?: PromoFormateursUpsertWithWhereUniqueWithoutUserInput | PromoFormateursUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PromoFormateursCreateManyUserInputEnvelope
    set?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    disconnect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    delete?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    update?: PromoFormateursUpdateWithWhereUniqueWithoutUserInput | PromoFormateursUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PromoFormateursUpdateManyWithWhereWithoutUserInput | PromoFormateursUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PromoFormateursScalarWhereInput | PromoFormateursScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PromoFormateursUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PromoFormateursCreateWithoutUserInput, PromoFormateursUncheckedCreateWithoutUserInput> | PromoFormateursCreateWithoutUserInput[] | PromoFormateursUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutUserInput | PromoFormateursCreateOrConnectWithoutUserInput[]
    upsert?: PromoFormateursUpsertWithWhereUniqueWithoutUserInput | PromoFormateursUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PromoFormateursCreateManyUserInputEnvelope
    set?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    disconnect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    delete?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    update?: PromoFormateursUpdateWithWhereUniqueWithoutUserInput | PromoFormateursUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PromoFormateursUpdateManyWithWhereWithoutUserInput | PromoFormateursUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PromoFormateursScalarWhereInput | PromoFormateursScalarWhereInput[]
  }

  export type ReferentielCreateNestedOneWithoutPromosInput = {
    create?: XOR<ReferentielCreateWithoutPromosInput, ReferentielUncheckedCreateWithoutPromosInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutPromosInput
    connect?: ReferentielWhereUniqueInput
  }

  export type PromoFormateursCreateNestedManyWithoutPromoInput = {
    create?: XOR<PromoFormateursCreateWithoutPromoInput, PromoFormateursUncheckedCreateWithoutPromoInput> | PromoFormateursCreateWithoutPromoInput[] | PromoFormateursUncheckedCreateWithoutPromoInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutPromoInput | PromoFormateursCreateOrConnectWithoutPromoInput[]
    createMany?: PromoFormateursCreateManyPromoInputEnvelope
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
  }

  export type PromoFormateursUncheckedCreateNestedManyWithoutPromoInput = {
    create?: XOR<PromoFormateursCreateWithoutPromoInput, PromoFormateursUncheckedCreateWithoutPromoInput> | PromoFormateursCreateWithoutPromoInput[] | PromoFormateursUncheckedCreateWithoutPromoInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutPromoInput | PromoFormateursCreateOrConnectWithoutPromoInput[]
    createMany?: PromoFormateursCreateManyPromoInputEnvelope
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ReferentielUpdateOneWithoutPromosNestedInput = {
    create?: XOR<ReferentielCreateWithoutPromosInput, ReferentielUncheckedCreateWithoutPromosInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutPromosInput
    upsert?: ReferentielUpsertWithoutPromosInput
    disconnect?: ReferentielWhereInput | boolean
    delete?: ReferentielWhereInput | boolean
    connect?: ReferentielWhereUniqueInput
    update?: XOR<XOR<ReferentielUpdateToOneWithWhereWithoutPromosInput, ReferentielUpdateWithoutPromosInput>, ReferentielUncheckedUpdateWithoutPromosInput>
  }

  export type PromoFormateursUpdateManyWithoutPromoNestedInput = {
    create?: XOR<PromoFormateursCreateWithoutPromoInput, PromoFormateursUncheckedCreateWithoutPromoInput> | PromoFormateursCreateWithoutPromoInput[] | PromoFormateursUncheckedCreateWithoutPromoInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutPromoInput | PromoFormateursCreateOrConnectWithoutPromoInput[]
    upsert?: PromoFormateursUpsertWithWhereUniqueWithoutPromoInput | PromoFormateursUpsertWithWhereUniqueWithoutPromoInput[]
    createMany?: PromoFormateursCreateManyPromoInputEnvelope
    set?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    disconnect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    delete?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    update?: PromoFormateursUpdateWithWhereUniqueWithoutPromoInput | PromoFormateursUpdateWithWhereUniqueWithoutPromoInput[]
    updateMany?: PromoFormateursUpdateManyWithWhereWithoutPromoInput | PromoFormateursUpdateManyWithWhereWithoutPromoInput[]
    deleteMany?: PromoFormateursScalarWhereInput | PromoFormateursScalarWhereInput[]
  }

  export type PromoFormateursUncheckedUpdateManyWithoutPromoNestedInput = {
    create?: XOR<PromoFormateursCreateWithoutPromoInput, PromoFormateursUncheckedCreateWithoutPromoInput> | PromoFormateursCreateWithoutPromoInput[] | PromoFormateursUncheckedCreateWithoutPromoInput[]
    connectOrCreate?: PromoFormateursCreateOrConnectWithoutPromoInput | PromoFormateursCreateOrConnectWithoutPromoInput[]
    upsert?: PromoFormateursUpsertWithWhereUniqueWithoutPromoInput | PromoFormateursUpsertWithWhereUniqueWithoutPromoInput[]
    createMany?: PromoFormateursCreateManyPromoInputEnvelope
    set?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    disconnect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    delete?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    connect?: PromoFormateursWhereUniqueInput | PromoFormateursWhereUniqueInput[]
    update?: PromoFormateursUpdateWithWhereUniqueWithoutPromoInput | PromoFormateursUpdateWithWhereUniqueWithoutPromoInput[]
    updateMany?: PromoFormateursUpdateManyWithWhereWithoutPromoInput | PromoFormateursUpdateManyWithWhereWithoutPromoInput[]
    deleteMany?: PromoFormateursScalarWhereInput | PromoFormateursScalarWhereInput[]
  }

  export type PromoCreateNestedOneWithoutFormateursInput = {
    create?: XOR<PromoCreateWithoutFormateursInput, PromoUncheckedCreateWithoutFormateursInput>
    connectOrCreate?: PromoCreateOrConnectWithoutFormateursInput
    connect?: PromoWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPromosFormateurInput = {
    create?: XOR<UserCreateWithoutPromosFormateurInput, UserUncheckedCreateWithoutPromosFormateurInput>
    connectOrCreate?: UserCreateOrConnectWithoutPromosFormateurInput
    connect?: UserWhereUniqueInput
  }

  export type PromoUpdateOneRequiredWithoutFormateursNestedInput = {
    create?: XOR<PromoCreateWithoutFormateursInput, PromoUncheckedCreateWithoutFormateursInput>
    connectOrCreate?: PromoCreateOrConnectWithoutFormateursInput
    upsert?: PromoUpsertWithoutFormateursInput
    connect?: PromoWhereUniqueInput
    update?: XOR<XOR<PromoUpdateToOneWithWhereWithoutFormateursInput, PromoUpdateWithoutFormateursInput>, PromoUncheckedUpdateWithoutFormateursInput>
  }

  export type UserUpdateOneRequiredWithoutPromosFormateurNestedInput = {
    create?: XOR<UserCreateWithoutPromosFormateurInput, UserUncheckedCreateWithoutPromosFormateurInput>
    connectOrCreate?: UserCreateOrConnectWithoutPromosFormateurInput
    upsert?: UserUpsertWithoutPromosFormateurInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPromosFormateurInput, UserUpdateWithoutPromosFormateurInput>, UserUncheckedUpdateWithoutPromosFormateurInput>
  }

  export type CompetenceNiveauCreateNestedManyWithoutNiveauInput = {
    create?: XOR<CompetenceNiveauCreateWithoutNiveauInput, CompetenceNiveauUncheckedCreateWithoutNiveauInput> | CompetenceNiveauCreateWithoutNiveauInput[] | CompetenceNiveauUncheckedCreateWithoutNiveauInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutNiveauInput | CompetenceNiveauCreateOrConnectWithoutNiveauInput[]
    createMany?: CompetenceNiveauCreateManyNiveauInputEnvelope
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
  }

  export type CompetenceNiveauUncheckedCreateNestedManyWithoutNiveauInput = {
    create?: XOR<CompetenceNiveauCreateWithoutNiveauInput, CompetenceNiveauUncheckedCreateWithoutNiveauInput> | CompetenceNiveauCreateWithoutNiveauInput[] | CompetenceNiveauUncheckedCreateWithoutNiveauInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutNiveauInput | CompetenceNiveauCreateOrConnectWithoutNiveauInput[]
    createMany?: CompetenceNiveauCreateManyNiveauInputEnvelope
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
  }

  export type CompetenceNiveauUpdateManyWithoutNiveauNestedInput = {
    create?: XOR<CompetenceNiveauCreateWithoutNiveauInput, CompetenceNiveauUncheckedCreateWithoutNiveauInput> | CompetenceNiveauCreateWithoutNiveauInput[] | CompetenceNiveauUncheckedCreateWithoutNiveauInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutNiveauInput | CompetenceNiveauCreateOrConnectWithoutNiveauInput[]
    upsert?: CompetenceNiveauUpsertWithWhereUniqueWithoutNiveauInput | CompetenceNiveauUpsertWithWhereUniqueWithoutNiveauInput[]
    createMany?: CompetenceNiveauCreateManyNiveauInputEnvelope
    set?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    disconnect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    delete?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    update?: CompetenceNiveauUpdateWithWhereUniqueWithoutNiveauInput | CompetenceNiveauUpdateWithWhereUniqueWithoutNiveauInput[]
    updateMany?: CompetenceNiveauUpdateManyWithWhereWithoutNiveauInput | CompetenceNiveauUpdateManyWithWhereWithoutNiveauInput[]
    deleteMany?: CompetenceNiveauScalarWhereInput | CompetenceNiveauScalarWhereInput[]
  }

  export type CompetenceNiveauUncheckedUpdateManyWithoutNiveauNestedInput = {
    create?: XOR<CompetenceNiveauCreateWithoutNiveauInput, CompetenceNiveauUncheckedCreateWithoutNiveauInput> | CompetenceNiveauCreateWithoutNiveauInput[] | CompetenceNiveauUncheckedCreateWithoutNiveauInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutNiveauInput | CompetenceNiveauCreateOrConnectWithoutNiveauInput[]
    upsert?: CompetenceNiveauUpsertWithWhereUniqueWithoutNiveauInput | CompetenceNiveauUpsertWithWhereUniqueWithoutNiveauInput[]
    createMany?: CompetenceNiveauCreateManyNiveauInputEnvelope
    set?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    disconnect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    delete?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    update?: CompetenceNiveauUpdateWithWhereUniqueWithoutNiveauInput | CompetenceNiveauUpdateWithWhereUniqueWithoutNiveauInput[]
    updateMany?: CompetenceNiveauUpdateManyWithWhereWithoutNiveauInput | CompetenceNiveauUpdateManyWithWhereWithoutNiveauInput[]
    deleteMany?: CompetenceNiveauScalarWhereInput | CompetenceNiveauScalarWhereInput[]
  }

  export type CompetenceNiveauCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<CompetenceNiveauCreateWithoutCompetenceInput, CompetenceNiveauUncheckedCreateWithoutCompetenceInput> | CompetenceNiveauCreateWithoutCompetenceInput[] | CompetenceNiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutCompetenceInput | CompetenceNiveauCreateOrConnectWithoutCompetenceInput[]
    createMany?: CompetenceNiveauCreateManyCompetenceInputEnvelope
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
  }

  export type ReferentielCompetenceCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutCompetenceInput, ReferentielCompetenceUncheckedCreateWithoutCompetenceInput> | ReferentielCompetenceCreateWithoutCompetenceInput[] | ReferentielCompetenceUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutCompetenceInput | ReferentielCompetenceCreateOrConnectWithoutCompetenceInput[]
    createMany?: ReferentielCompetenceCreateManyCompetenceInputEnvelope
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
  }

  export type CompetenceNiveauUncheckedCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<CompetenceNiveauCreateWithoutCompetenceInput, CompetenceNiveauUncheckedCreateWithoutCompetenceInput> | CompetenceNiveauCreateWithoutCompetenceInput[] | CompetenceNiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutCompetenceInput | CompetenceNiveauCreateOrConnectWithoutCompetenceInput[]
    createMany?: CompetenceNiveauCreateManyCompetenceInputEnvelope
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
  }

  export type ReferentielCompetenceUncheckedCreateNestedManyWithoutCompetenceInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutCompetenceInput, ReferentielCompetenceUncheckedCreateWithoutCompetenceInput> | ReferentielCompetenceCreateWithoutCompetenceInput[] | ReferentielCompetenceUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutCompetenceInput | ReferentielCompetenceCreateOrConnectWithoutCompetenceInput[]
    createMany?: ReferentielCompetenceCreateManyCompetenceInputEnvelope
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CompetenceNiveauUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<CompetenceNiveauCreateWithoutCompetenceInput, CompetenceNiveauUncheckedCreateWithoutCompetenceInput> | CompetenceNiveauCreateWithoutCompetenceInput[] | CompetenceNiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutCompetenceInput | CompetenceNiveauCreateOrConnectWithoutCompetenceInput[]
    upsert?: CompetenceNiveauUpsertWithWhereUniqueWithoutCompetenceInput | CompetenceNiveauUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: CompetenceNiveauCreateManyCompetenceInputEnvelope
    set?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    disconnect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    delete?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    update?: CompetenceNiveauUpdateWithWhereUniqueWithoutCompetenceInput | CompetenceNiveauUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: CompetenceNiveauUpdateManyWithWhereWithoutCompetenceInput | CompetenceNiveauUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: CompetenceNiveauScalarWhereInput | CompetenceNiveauScalarWhereInput[]
  }

  export type ReferentielCompetenceUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutCompetenceInput, ReferentielCompetenceUncheckedCreateWithoutCompetenceInput> | ReferentielCompetenceCreateWithoutCompetenceInput[] | ReferentielCompetenceUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutCompetenceInput | ReferentielCompetenceCreateOrConnectWithoutCompetenceInput[]
    upsert?: ReferentielCompetenceUpsertWithWhereUniqueWithoutCompetenceInput | ReferentielCompetenceUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: ReferentielCompetenceCreateManyCompetenceInputEnvelope
    set?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    disconnect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    delete?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    update?: ReferentielCompetenceUpdateWithWhereUniqueWithoutCompetenceInput | ReferentielCompetenceUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: ReferentielCompetenceUpdateManyWithWhereWithoutCompetenceInput | ReferentielCompetenceUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: ReferentielCompetenceScalarWhereInput | ReferentielCompetenceScalarWhereInput[]
  }

  export type CompetenceNiveauUncheckedUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<CompetenceNiveauCreateWithoutCompetenceInput, CompetenceNiveauUncheckedCreateWithoutCompetenceInput> | CompetenceNiveauCreateWithoutCompetenceInput[] | CompetenceNiveauUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: CompetenceNiveauCreateOrConnectWithoutCompetenceInput | CompetenceNiveauCreateOrConnectWithoutCompetenceInput[]
    upsert?: CompetenceNiveauUpsertWithWhereUniqueWithoutCompetenceInput | CompetenceNiveauUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: CompetenceNiveauCreateManyCompetenceInputEnvelope
    set?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    disconnect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    delete?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    connect?: CompetenceNiveauWhereUniqueInput | CompetenceNiveauWhereUniqueInput[]
    update?: CompetenceNiveauUpdateWithWhereUniqueWithoutCompetenceInput | CompetenceNiveauUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: CompetenceNiveauUpdateManyWithWhereWithoutCompetenceInput | CompetenceNiveauUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: CompetenceNiveauScalarWhereInput | CompetenceNiveauScalarWhereInput[]
  }

  export type ReferentielCompetenceUncheckedUpdateManyWithoutCompetenceNestedInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutCompetenceInput, ReferentielCompetenceUncheckedCreateWithoutCompetenceInput> | ReferentielCompetenceCreateWithoutCompetenceInput[] | ReferentielCompetenceUncheckedCreateWithoutCompetenceInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutCompetenceInput | ReferentielCompetenceCreateOrConnectWithoutCompetenceInput[]
    upsert?: ReferentielCompetenceUpsertWithWhereUniqueWithoutCompetenceInput | ReferentielCompetenceUpsertWithWhereUniqueWithoutCompetenceInput[]
    createMany?: ReferentielCompetenceCreateManyCompetenceInputEnvelope
    set?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    disconnect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    delete?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    update?: ReferentielCompetenceUpdateWithWhereUniqueWithoutCompetenceInput | ReferentielCompetenceUpdateWithWhereUniqueWithoutCompetenceInput[]
    updateMany?: ReferentielCompetenceUpdateManyWithWhereWithoutCompetenceInput | ReferentielCompetenceUpdateManyWithWhereWithoutCompetenceInput[]
    deleteMany?: ReferentielCompetenceScalarWhereInput | ReferentielCompetenceScalarWhereInput[]
  }

  export type CompetenceCreateNestedOneWithoutNiveauxInput = {
    create?: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutNiveauxInput
    connect?: CompetenceWhereUniqueInput
  }

  export type NiveauCreateNestedOneWithoutCompetencesInput = {
    create?: XOR<NiveauCreateWithoutCompetencesInput, NiveauUncheckedCreateWithoutCompetencesInput>
    connectOrCreate?: NiveauCreateOrConnectWithoutCompetencesInput
    connect?: NiveauWhereUniqueInput
  }

  export type CompetenceUpdateOneRequiredWithoutNiveauxNestedInput = {
    create?: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutNiveauxInput
    upsert?: CompetenceUpsertWithoutNiveauxInput
    connect?: CompetenceWhereUniqueInput
    update?: XOR<XOR<CompetenceUpdateToOneWithWhereWithoutNiveauxInput, CompetenceUpdateWithoutNiveauxInput>, CompetenceUncheckedUpdateWithoutNiveauxInput>
  }

  export type NiveauUpdateOneRequiredWithoutCompetencesNestedInput = {
    create?: XOR<NiveauCreateWithoutCompetencesInput, NiveauUncheckedCreateWithoutCompetencesInput>
    connectOrCreate?: NiveauCreateOrConnectWithoutCompetencesInput
    upsert?: NiveauUpsertWithoutCompetencesInput
    connect?: NiveauWhereUniqueInput
    update?: XOR<XOR<NiveauUpdateToOneWithWhereWithoutCompetencesInput, NiveauUpdateWithoutCompetencesInput>, NiveauUncheckedUpdateWithoutCompetencesInput>
  }

  export type ReferentielCompetenceCreateNestedManyWithoutReferentielInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutReferentielInput, ReferentielCompetenceUncheckedCreateWithoutReferentielInput> | ReferentielCompetenceCreateWithoutReferentielInput[] | ReferentielCompetenceUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutReferentielInput | ReferentielCompetenceCreateOrConnectWithoutReferentielInput[]
    createMany?: ReferentielCompetenceCreateManyReferentielInputEnvelope
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutReferentielInput = {
    create?: XOR<UserCreateWithoutReferentielInput, UserUncheckedCreateWithoutReferentielInput> | UserCreateWithoutReferentielInput[] | UserUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferentielInput | UserCreateOrConnectWithoutReferentielInput[]
    createMany?: UserCreateManyReferentielInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PromoCreateNestedManyWithoutReferentielInput = {
    create?: XOR<PromoCreateWithoutReferentielInput, PromoUncheckedCreateWithoutReferentielInput> | PromoCreateWithoutReferentielInput[] | PromoUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: PromoCreateOrConnectWithoutReferentielInput | PromoCreateOrConnectWithoutReferentielInput[]
    createMany?: PromoCreateManyReferentielInputEnvelope
    connect?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
  }

  export type ReferentielCompetenceUncheckedCreateNestedManyWithoutReferentielInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutReferentielInput, ReferentielCompetenceUncheckedCreateWithoutReferentielInput> | ReferentielCompetenceCreateWithoutReferentielInput[] | ReferentielCompetenceUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutReferentielInput | ReferentielCompetenceCreateOrConnectWithoutReferentielInput[]
    createMany?: ReferentielCompetenceCreateManyReferentielInputEnvelope
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReferentielInput = {
    create?: XOR<UserCreateWithoutReferentielInput, UserUncheckedCreateWithoutReferentielInput> | UserCreateWithoutReferentielInput[] | UserUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferentielInput | UserCreateOrConnectWithoutReferentielInput[]
    createMany?: UserCreateManyReferentielInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PromoUncheckedCreateNestedManyWithoutReferentielInput = {
    create?: XOR<PromoCreateWithoutReferentielInput, PromoUncheckedCreateWithoutReferentielInput> | PromoCreateWithoutReferentielInput[] | PromoUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: PromoCreateOrConnectWithoutReferentielInput | PromoCreateOrConnectWithoutReferentielInput[]
    createMany?: PromoCreateManyReferentielInputEnvelope
    connect?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
  }

  export type ReferentielCompetenceUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutReferentielInput, ReferentielCompetenceUncheckedCreateWithoutReferentielInput> | ReferentielCompetenceCreateWithoutReferentielInput[] | ReferentielCompetenceUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutReferentielInput | ReferentielCompetenceCreateOrConnectWithoutReferentielInput[]
    upsert?: ReferentielCompetenceUpsertWithWhereUniqueWithoutReferentielInput | ReferentielCompetenceUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: ReferentielCompetenceCreateManyReferentielInputEnvelope
    set?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    disconnect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    delete?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    update?: ReferentielCompetenceUpdateWithWhereUniqueWithoutReferentielInput | ReferentielCompetenceUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: ReferentielCompetenceUpdateManyWithWhereWithoutReferentielInput | ReferentielCompetenceUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: ReferentielCompetenceScalarWhereInput | ReferentielCompetenceScalarWhereInput[]
  }

  export type UserUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<UserCreateWithoutReferentielInput, UserUncheckedCreateWithoutReferentielInput> | UserCreateWithoutReferentielInput[] | UserUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferentielInput | UserCreateOrConnectWithoutReferentielInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferentielInput | UserUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: UserCreateManyReferentielInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferentielInput | UserUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferentielInput | UserUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PromoUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<PromoCreateWithoutReferentielInput, PromoUncheckedCreateWithoutReferentielInput> | PromoCreateWithoutReferentielInput[] | PromoUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: PromoCreateOrConnectWithoutReferentielInput | PromoCreateOrConnectWithoutReferentielInput[]
    upsert?: PromoUpsertWithWhereUniqueWithoutReferentielInput | PromoUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: PromoCreateManyReferentielInputEnvelope
    set?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    disconnect?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    delete?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    connect?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    update?: PromoUpdateWithWhereUniqueWithoutReferentielInput | PromoUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: PromoUpdateManyWithWhereWithoutReferentielInput | PromoUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: PromoScalarWhereInput | PromoScalarWhereInput[]
  }

  export type ReferentielCompetenceUncheckedUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<ReferentielCompetenceCreateWithoutReferentielInput, ReferentielCompetenceUncheckedCreateWithoutReferentielInput> | ReferentielCompetenceCreateWithoutReferentielInput[] | ReferentielCompetenceUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: ReferentielCompetenceCreateOrConnectWithoutReferentielInput | ReferentielCompetenceCreateOrConnectWithoutReferentielInput[]
    upsert?: ReferentielCompetenceUpsertWithWhereUniqueWithoutReferentielInput | ReferentielCompetenceUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: ReferentielCompetenceCreateManyReferentielInputEnvelope
    set?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    disconnect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    delete?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    connect?: ReferentielCompetenceWhereUniqueInput | ReferentielCompetenceWhereUniqueInput[]
    update?: ReferentielCompetenceUpdateWithWhereUniqueWithoutReferentielInput | ReferentielCompetenceUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: ReferentielCompetenceUpdateManyWithWhereWithoutReferentielInput | ReferentielCompetenceUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: ReferentielCompetenceScalarWhereInput | ReferentielCompetenceScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<UserCreateWithoutReferentielInput, UserUncheckedCreateWithoutReferentielInput> | UserCreateWithoutReferentielInput[] | UserUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferentielInput | UserCreateOrConnectWithoutReferentielInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferentielInput | UserUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: UserCreateManyReferentielInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferentielInput | UserUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferentielInput | UserUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PromoUncheckedUpdateManyWithoutReferentielNestedInput = {
    create?: XOR<PromoCreateWithoutReferentielInput, PromoUncheckedCreateWithoutReferentielInput> | PromoCreateWithoutReferentielInput[] | PromoUncheckedCreateWithoutReferentielInput[]
    connectOrCreate?: PromoCreateOrConnectWithoutReferentielInput | PromoCreateOrConnectWithoutReferentielInput[]
    upsert?: PromoUpsertWithWhereUniqueWithoutReferentielInput | PromoUpsertWithWhereUniqueWithoutReferentielInput[]
    createMany?: PromoCreateManyReferentielInputEnvelope
    set?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    disconnect?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    delete?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    connect?: PromoWhereUniqueInput | PromoWhereUniqueInput[]
    update?: PromoUpdateWithWhereUniqueWithoutReferentielInput | PromoUpdateWithWhereUniqueWithoutReferentielInput[]
    updateMany?: PromoUpdateManyWithWhereWithoutReferentielInput | PromoUpdateManyWithWhereWithoutReferentielInput[]
    deleteMany?: PromoScalarWhereInput | PromoScalarWhereInput[]
  }

  export type ReferentielCreateNestedOneWithoutCompetencesInput = {
    create?: XOR<ReferentielCreateWithoutCompetencesInput, ReferentielUncheckedCreateWithoutCompetencesInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutCompetencesInput
    connect?: ReferentielWhereUniqueInput
  }

  export type CompetenceCreateNestedOneWithoutReferentielsInput = {
    create?: XOR<CompetenceCreateWithoutReferentielsInput, CompetenceUncheckedCreateWithoutReferentielsInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutReferentielsInput
    connect?: CompetenceWhereUniqueInput
  }

  export type ReferentielUpdateOneRequiredWithoutCompetencesNestedInput = {
    create?: XOR<ReferentielCreateWithoutCompetencesInput, ReferentielUncheckedCreateWithoutCompetencesInput>
    connectOrCreate?: ReferentielCreateOrConnectWithoutCompetencesInput
    upsert?: ReferentielUpsertWithoutCompetencesInput
    connect?: ReferentielWhereUniqueInput
    update?: XOR<XOR<ReferentielUpdateToOneWithWhereWithoutCompetencesInput, ReferentielUpdateWithoutCompetencesInput>, ReferentielUncheckedUpdateWithoutCompetencesInput>
  }

  export type CompetenceUpdateOneRequiredWithoutReferentielsNestedInput = {
    create?: XOR<CompetenceCreateWithoutReferentielsInput, CompetenceUncheckedCreateWithoutReferentielsInput>
    connectOrCreate?: CompetenceCreateOrConnectWithoutReferentielsInput
    upsert?: CompetenceUpsertWithoutReferentielsInput
    connect?: CompetenceWhereUniqueInput
    update?: XOR<XOR<CompetenceUpdateToOneWithWhereWithoutReferentielsInput, CompetenceUpdateWithoutReferentielsInput>, CompetenceUncheckedUpdateWithoutReferentielsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutProfileInput = {
    username: string
    email: string
    password: string
    profilSortie?: ProfilSortieCreateNestedOneWithoutUsersInput
    referentiel?: ReferentielCreateNestedOneWithoutUsersInput
    promosFormateur?: PromoFormateursCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: number
    username: string
    email: string
    password: string
    profilSortieId?: number | null
    referentielId?: number | null
    promosFormateur?: PromoFormateursUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserCreateManyProfileInputEnvelope = {
    data: UserCreateManyProfileInput | UserCreateManyProfileInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutProfileInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfileInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateManyWithWhereWithoutProfileInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProfileInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    profileId?: IntFilter<"User"> | number
    profilSortieId?: IntNullableFilter<"User"> | number | null
    referentielId?: IntNullableFilter<"User"> | number | null
  }

  export type UserCreateWithoutProfilSortieInput = {
    username: string
    email: string
    password: string
    profile: ProfileCreateNestedOneWithoutUsersInput
    referentiel?: ReferentielCreateNestedOneWithoutUsersInput
    promosFormateur?: PromoFormateursCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfilSortieInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    referentielId?: number | null
    promosFormateur?: PromoFormateursUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfilSortieInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfilSortieInput, UserUncheckedCreateWithoutProfilSortieInput>
  }

  export type UserCreateManyProfilSortieInputEnvelope = {
    data: UserCreateManyProfilSortieInput | UserCreateManyProfilSortieInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutProfilSortieInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutProfilSortieInput, UserUncheckedUpdateWithoutProfilSortieInput>
    create: XOR<UserCreateWithoutProfilSortieInput, UserUncheckedCreateWithoutProfilSortieInput>
  }

  export type UserUpdateWithWhereUniqueWithoutProfilSortieInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutProfilSortieInput, UserUncheckedUpdateWithoutProfilSortieInput>
  }

  export type UserUpdateManyWithWhereWithoutProfilSortieInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutProfilSortieInput>
  }

  export type ProfileCreateWithoutUsersInput = {
    nom: string
  }

  export type ProfileUncheckedCreateWithoutUsersInput = {
    id?: number
    nom: string
  }

  export type ProfileCreateOrConnectWithoutUsersInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
  }

  export type ProfilSortieCreateWithoutUsersInput = {
    nom: string
  }

  export type ProfilSortieUncheckedCreateWithoutUsersInput = {
    id?: number
    nom: string
  }

  export type ProfilSortieCreateOrConnectWithoutUsersInput = {
    where: ProfilSortieWhereUniqueInput
    create: XOR<ProfilSortieCreateWithoutUsersInput, ProfilSortieUncheckedCreateWithoutUsersInput>
  }

  export type ReferentielCreateWithoutUsersInput = {
    nom: string
    description?: string | null
    competences?: ReferentielCompetenceCreateNestedManyWithoutReferentielInput
    promos?: PromoCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUncheckedCreateWithoutUsersInput = {
    id?: number
    nom: string
    description?: string | null
    competences?: ReferentielCompetenceUncheckedCreateNestedManyWithoutReferentielInput
    promos?: PromoUncheckedCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielCreateOrConnectWithoutUsersInput = {
    where: ReferentielWhereUniqueInput
    create: XOR<ReferentielCreateWithoutUsersInput, ReferentielUncheckedCreateWithoutUsersInput>
  }

  export type PromoFormateursCreateWithoutUserInput = {
    promo: PromoCreateNestedOneWithoutFormateursInput
  }

  export type PromoFormateursUncheckedCreateWithoutUserInput = {
    promoId: number
  }

  export type PromoFormateursCreateOrConnectWithoutUserInput = {
    where: PromoFormateursWhereUniqueInput
    create: XOR<PromoFormateursCreateWithoutUserInput, PromoFormateursUncheckedCreateWithoutUserInput>
  }

  export type PromoFormateursCreateManyUserInputEnvelope = {
    data: PromoFormateursCreateManyUserInput | PromoFormateursCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUsersInput = {
    update: XOR<ProfileUpdateWithoutUsersInput, ProfileUncheckedUpdateWithoutUsersInput>
    create: XOR<ProfileCreateWithoutUsersInput, ProfileUncheckedCreateWithoutUsersInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUsersInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUsersInput, ProfileUncheckedUpdateWithoutUsersInput>
  }

  export type ProfileUpdateWithoutUsersInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilSortieUpsertWithoutUsersInput = {
    update: XOR<ProfilSortieUpdateWithoutUsersInput, ProfilSortieUncheckedUpdateWithoutUsersInput>
    create: XOR<ProfilSortieCreateWithoutUsersInput, ProfilSortieUncheckedCreateWithoutUsersInput>
    where?: ProfilSortieWhereInput
  }

  export type ProfilSortieUpdateToOneWithWhereWithoutUsersInput = {
    where?: ProfilSortieWhereInput
    data: XOR<ProfilSortieUpdateWithoutUsersInput, ProfilSortieUncheckedUpdateWithoutUsersInput>
  }

  export type ProfilSortieUpdateWithoutUsersInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilSortieUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ReferentielUpsertWithoutUsersInput = {
    update: XOR<ReferentielUpdateWithoutUsersInput, ReferentielUncheckedUpdateWithoutUsersInput>
    create: XOR<ReferentielCreateWithoutUsersInput, ReferentielUncheckedCreateWithoutUsersInput>
    where?: ReferentielWhereInput
  }

  export type ReferentielUpdateToOneWithWhereWithoutUsersInput = {
    where?: ReferentielWhereInput
    data: XOR<ReferentielUpdateWithoutUsersInput, ReferentielUncheckedUpdateWithoutUsersInput>
  }

  export type ReferentielUpdateWithoutUsersInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competences?: ReferentielCompetenceUpdateManyWithoutReferentielNestedInput
    promos?: PromoUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competences?: ReferentielCompetenceUncheckedUpdateManyWithoutReferentielNestedInput
    promos?: PromoUncheckedUpdateManyWithoutReferentielNestedInput
  }

  export type PromoFormateursUpsertWithWhereUniqueWithoutUserInput = {
    where: PromoFormateursWhereUniqueInput
    update: XOR<PromoFormateursUpdateWithoutUserInput, PromoFormateursUncheckedUpdateWithoutUserInput>
    create: XOR<PromoFormateursCreateWithoutUserInput, PromoFormateursUncheckedCreateWithoutUserInput>
  }

  export type PromoFormateursUpdateWithWhereUniqueWithoutUserInput = {
    where: PromoFormateursWhereUniqueInput
    data: XOR<PromoFormateursUpdateWithoutUserInput, PromoFormateursUncheckedUpdateWithoutUserInput>
  }

  export type PromoFormateursUpdateManyWithWhereWithoutUserInput = {
    where: PromoFormateursScalarWhereInput
    data: XOR<PromoFormateursUpdateManyMutationInput, PromoFormateursUncheckedUpdateManyWithoutUserInput>
  }

  export type PromoFormateursScalarWhereInput = {
    AND?: PromoFormateursScalarWhereInput | PromoFormateursScalarWhereInput[]
    OR?: PromoFormateursScalarWhereInput[]
    NOT?: PromoFormateursScalarWhereInput | PromoFormateursScalarWhereInput[]
    promoId?: IntFilter<"PromoFormateurs"> | number
    userId?: IntFilter<"PromoFormateurs"> | number
  }

  export type ReferentielCreateWithoutPromosInput = {
    nom: string
    description?: string | null
    competences?: ReferentielCompetenceCreateNestedManyWithoutReferentielInput
    users?: UserCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUncheckedCreateWithoutPromosInput = {
    id?: number
    nom: string
    description?: string | null
    competences?: ReferentielCompetenceUncheckedCreateNestedManyWithoutReferentielInput
    users?: UserUncheckedCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielCreateOrConnectWithoutPromosInput = {
    where: ReferentielWhereUniqueInput
    create: XOR<ReferentielCreateWithoutPromosInput, ReferentielUncheckedCreateWithoutPromosInput>
  }

  export type PromoFormateursCreateWithoutPromoInput = {
    user: UserCreateNestedOneWithoutPromosFormateurInput
  }

  export type PromoFormateursUncheckedCreateWithoutPromoInput = {
    userId: number
  }

  export type PromoFormateursCreateOrConnectWithoutPromoInput = {
    where: PromoFormateursWhereUniqueInput
    create: XOR<PromoFormateursCreateWithoutPromoInput, PromoFormateursUncheckedCreateWithoutPromoInput>
  }

  export type PromoFormateursCreateManyPromoInputEnvelope = {
    data: PromoFormateursCreateManyPromoInput | PromoFormateursCreateManyPromoInput[]
    skipDuplicates?: boolean
  }

  export type ReferentielUpsertWithoutPromosInput = {
    update: XOR<ReferentielUpdateWithoutPromosInput, ReferentielUncheckedUpdateWithoutPromosInput>
    create: XOR<ReferentielCreateWithoutPromosInput, ReferentielUncheckedCreateWithoutPromosInput>
    where?: ReferentielWhereInput
  }

  export type ReferentielUpdateToOneWithWhereWithoutPromosInput = {
    where?: ReferentielWhereInput
    data: XOR<ReferentielUpdateWithoutPromosInput, ReferentielUncheckedUpdateWithoutPromosInput>
  }

  export type ReferentielUpdateWithoutPromosInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competences?: ReferentielCompetenceUpdateManyWithoutReferentielNestedInput
    users?: UserUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateWithoutPromosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    competences?: ReferentielCompetenceUncheckedUpdateManyWithoutReferentielNestedInput
    users?: UserUncheckedUpdateManyWithoutReferentielNestedInput
  }

  export type PromoFormateursUpsertWithWhereUniqueWithoutPromoInput = {
    where: PromoFormateursWhereUniqueInput
    update: XOR<PromoFormateursUpdateWithoutPromoInput, PromoFormateursUncheckedUpdateWithoutPromoInput>
    create: XOR<PromoFormateursCreateWithoutPromoInput, PromoFormateursUncheckedCreateWithoutPromoInput>
  }

  export type PromoFormateursUpdateWithWhereUniqueWithoutPromoInput = {
    where: PromoFormateursWhereUniqueInput
    data: XOR<PromoFormateursUpdateWithoutPromoInput, PromoFormateursUncheckedUpdateWithoutPromoInput>
  }

  export type PromoFormateursUpdateManyWithWhereWithoutPromoInput = {
    where: PromoFormateursScalarWhereInput
    data: XOR<PromoFormateursUpdateManyMutationInput, PromoFormateursUncheckedUpdateManyWithoutPromoInput>
  }

  export type PromoCreateWithoutFormateursInput = {
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    referentiel?: ReferentielCreateNestedOneWithoutPromosInput
  }

  export type PromoUncheckedCreateWithoutFormateursInput = {
    id?: number
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    referentielId?: number | null
  }

  export type PromoCreateOrConnectWithoutFormateursInput = {
    where: PromoWhereUniqueInput
    create: XOR<PromoCreateWithoutFormateursInput, PromoUncheckedCreateWithoutFormateursInput>
  }

  export type UserCreateWithoutPromosFormateurInput = {
    username: string
    email: string
    password: string
    profile: ProfileCreateNestedOneWithoutUsersInput
    profilSortie?: ProfilSortieCreateNestedOneWithoutUsersInput
    referentiel?: ReferentielCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutPromosFormateurInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    profilSortieId?: number | null
    referentielId?: number | null
  }

  export type UserCreateOrConnectWithoutPromosFormateurInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPromosFormateurInput, UserUncheckedCreateWithoutPromosFormateurInput>
  }

  export type PromoUpsertWithoutFormateursInput = {
    update: XOR<PromoUpdateWithoutFormateursInput, PromoUncheckedUpdateWithoutFormateursInput>
    create: XOR<PromoCreateWithoutFormateursInput, PromoUncheckedCreateWithoutFormateursInput>
    where?: PromoWhereInput
  }

  export type PromoUpdateToOneWithWhereWithoutFormateursInput = {
    where?: PromoWhereInput
    data: XOR<PromoUpdateWithoutFormateursInput, PromoUncheckedUpdateWithoutFormateursInput>
  }

  export type PromoUpdateWithoutFormateursInput = {
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    referentiel?: ReferentielUpdateOneWithoutPromosNestedInput
  }

  export type PromoUncheckedUpdateWithoutFormateursInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutPromosFormateurInput = {
    update: XOR<UserUpdateWithoutPromosFormateurInput, UserUncheckedUpdateWithoutPromosFormateurInput>
    create: XOR<UserCreateWithoutPromosFormateurInput, UserUncheckedCreateWithoutPromosFormateurInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPromosFormateurInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPromosFormateurInput, UserUncheckedUpdateWithoutPromosFormateurInput>
  }

  export type UserUpdateWithoutPromosFormateurInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    profilSortie?: ProfilSortieUpdateOneWithoutUsersNestedInput
    referentiel?: ReferentielUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPromosFormateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompetenceNiveauCreateWithoutNiveauInput = {
    competence: CompetenceCreateNestedOneWithoutNiveauxInput
  }

  export type CompetenceNiveauUncheckedCreateWithoutNiveauInput = {
    competenceId: number
  }

  export type CompetenceNiveauCreateOrConnectWithoutNiveauInput = {
    where: CompetenceNiveauWhereUniqueInput
    create: XOR<CompetenceNiveauCreateWithoutNiveauInput, CompetenceNiveauUncheckedCreateWithoutNiveauInput>
  }

  export type CompetenceNiveauCreateManyNiveauInputEnvelope = {
    data: CompetenceNiveauCreateManyNiveauInput | CompetenceNiveauCreateManyNiveauInput[]
    skipDuplicates?: boolean
  }

  export type CompetenceNiveauUpsertWithWhereUniqueWithoutNiveauInput = {
    where: CompetenceNiveauWhereUniqueInput
    update: XOR<CompetenceNiveauUpdateWithoutNiveauInput, CompetenceNiveauUncheckedUpdateWithoutNiveauInput>
    create: XOR<CompetenceNiveauCreateWithoutNiveauInput, CompetenceNiveauUncheckedCreateWithoutNiveauInput>
  }

  export type CompetenceNiveauUpdateWithWhereUniqueWithoutNiveauInput = {
    where: CompetenceNiveauWhereUniqueInput
    data: XOR<CompetenceNiveauUpdateWithoutNiveauInput, CompetenceNiveauUncheckedUpdateWithoutNiveauInput>
  }

  export type CompetenceNiveauUpdateManyWithWhereWithoutNiveauInput = {
    where: CompetenceNiveauScalarWhereInput
    data: XOR<CompetenceNiveauUpdateManyMutationInput, CompetenceNiveauUncheckedUpdateManyWithoutNiveauInput>
  }

  export type CompetenceNiveauScalarWhereInput = {
    AND?: CompetenceNiveauScalarWhereInput | CompetenceNiveauScalarWhereInput[]
    OR?: CompetenceNiveauScalarWhereInput[]
    NOT?: CompetenceNiveauScalarWhereInput | CompetenceNiveauScalarWhereInput[]
    competenceId?: IntFilter<"CompetenceNiveau"> | number
    niveauId?: IntFilter<"CompetenceNiveau"> | number
  }

  export type CompetenceNiveauCreateWithoutCompetenceInput = {
    niveau: NiveauCreateNestedOneWithoutCompetencesInput
  }

  export type CompetenceNiveauUncheckedCreateWithoutCompetenceInput = {
    niveauId: number
  }

  export type CompetenceNiveauCreateOrConnectWithoutCompetenceInput = {
    where: CompetenceNiveauWhereUniqueInput
    create: XOR<CompetenceNiveauCreateWithoutCompetenceInput, CompetenceNiveauUncheckedCreateWithoutCompetenceInput>
  }

  export type CompetenceNiveauCreateManyCompetenceInputEnvelope = {
    data: CompetenceNiveauCreateManyCompetenceInput | CompetenceNiveauCreateManyCompetenceInput[]
    skipDuplicates?: boolean
  }

  export type ReferentielCompetenceCreateWithoutCompetenceInput = {
    referentiel: ReferentielCreateNestedOneWithoutCompetencesInput
  }

  export type ReferentielCompetenceUncheckedCreateWithoutCompetenceInput = {
    referentielId: number
  }

  export type ReferentielCompetenceCreateOrConnectWithoutCompetenceInput = {
    where: ReferentielCompetenceWhereUniqueInput
    create: XOR<ReferentielCompetenceCreateWithoutCompetenceInput, ReferentielCompetenceUncheckedCreateWithoutCompetenceInput>
  }

  export type ReferentielCompetenceCreateManyCompetenceInputEnvelope = {
    data: ReferentielCompetenceCreateManyCompetenceInput | ReferentielCompetenceCreateManyCompetenceInput[]
    skipDuplicates?: boolean
  }

  export type CompetenceNiveauUpsertWithWhereUniqueWithoutCompetenceInput = {
    where: CompetenceNiveauWhereUniqueInput
    update: XOR<CompetenceNiveauUpdateWithoutCompetenceInput, CompetenceNiveauUncheckedUpdateWithoutCompetenceInput>
    create: XOR<CompetenceNiveauCreateWithoutCompetenceInput, CompetenceNiveauUncheckedCreateWithoutCompetenceInput>
  }

  export type CompetenceNiveauUpdateWithWhereUniqueWithoutCompetenceInput = {
    where: CompetenceNiveauWhereUniqueInput
    data: XOR<CompetenceNiveauUpdateWithoutCompetenceInput, CompetenceNiveauUncheckedUpdateWithoutCompetenceInput>
  }

  export type CompetenceNiveauUpdateManyWithWhereWithoutCompetenceInput = {
    where: CompetenceNiveauScalarWhereInput
    data: XOR<CompetenceNiveauUpdateManyMutationInput, CompetenceNiveauUncheckedUpdateManyWithoutCompetenceInput>
  }

  export type ReferentielCompetenceUpsertWithWhereUniqueWithoutCompetenceInput = {
    where: ReferentielCompetenceWhereUniqueInput
    update: XOR<ReferentielCompetenceUpdateWithoutCompetenceInput, ReferentielCompetenceUncheckedUpdateWithoutCompetenceInput>
    create: XOR<ReferentielCompetenceCreateWithoutCompetenceInput, ReferentielCompetenceUncheckedCreateWithoutCompetenceInput>
  }

  export type ReferentielCompetenceUpdateWithWhereUniqueWithoutCompetenceInput = {
    where: ReferentielCompetenceWhereUniqueInput
    data: XOR<ReferentielCompetenceUpdateWithoutCompetenceInput, ReferentielCompetenceUncheckedUpdateWithoutCompetenceInput>
  }

  export type ReferentielCompetenceUpdateManyWithWhereWithoutCompetenceInput = {
    where: ReferentielCompetenceScalarWhereInput
    data: XOR<ReferentielCompetenceUpdateManyMutationInput, ReferentielCompetenceUncheckedUpdateManyWithoutCompetenceInput>
  }

  export type ReferentielCompetenceScalarWhereInput = {
    AND?: ReferentielCompetenceScalarWhereInput | ReferentielCompetenceScalarWhereInput[]
    OR?: ReferentielCompetenceScalarWhereInput[]
    NOT?: ReferentielCompetenceScalarWhereInput | ReferentielCompetenceScalarWhereInput[]
    referentielId?: IntFilter<"ReferentielCompetence"> | number
    competenceId?: IntFilter<"ReferentielCompetence"> | number
  }

  export type CompetenceCreateWithoutNiveauxInput = {
    nom: string
    description?: string | null
    referentiels?: ReferentielCompetenceCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateWithoutNiveauxInput = {
    id?: number
    nom: string
    description?: string | null
    referentiels?: ReferentielCompetenceUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceCreateOrConnectWithoutNiveauxInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
  }

  export type NiveauCreateWithoutCompetencesInput = {
    nom: string
  }

  export type NiveauUncheckedCreateWithoutCompetencesInput = {
    id?: number
    nom: string
  }

  export type NiveauCreateOrConnectWithoutCompetencesInput = {
    where: NiveauWhereUniqueInput
    create: XOR<NiveauCreateWithoutCompetencesInput, NiveauUncheckedCreateWithoutCompetencesInput>
  }

  export type CompetenceUpsertWithoutNiveauxInput = {
    update: XOR<CompetenceUpdateWithoutNiveauxInput, CompetenceUncheckedUpdateWithoutNiveauxInput>
    create: XOR<CompetenceCreateWithoutNiveauxInput, CompetenceUncheckedCreateWithoutNiveauxInput>
    where?: CompetenceWhereInput
  }

  export type CompetenceUpdateToOneWithWhereWithoutNiveauxInput = {
    where?: CompetenceWhereInput
    data: XOR<CompetenceUpdateWithoutNiveauxInput, CompetenceUncheckedUpdateWithoutNiveauxInput>
  }

  export type CompetenceUpdateWithoutNiveauxInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referentiels?: ReferentielCompetenceUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateWithoutNiveauxInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    referentiels?: ReferentielCompetenceUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type NiveauUpsertWithoutCompetencesInput = {
    update: XOR<NiveauUpdateWithoutCompetencesInput, NiveauUncheckedUpdateWithoutCompetencesInput>
    create: XOR<NiveauCreateWithoutCompetencesInput, NiveauUncheckedCreateWithoutCompetencesInput>
    where?: NiveauWhereInput
  }

  export type NiveauUpdateToOneWithWhereWithoutCompetencesInput = {
    where?: NiveauWhereInput
    data: XOR<NiveauUpdateWithoutCompetencesInput, NiveauUncheckedUpdateWithoutCompetencesInput>
  }

  export type NiveauUpdateWithoutCompetencesInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type NiveauUncheckedUpdateWithoutCompetencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ReferentielCompetenceCreateWithoutReferentielInput = {
    competence: CompetenceCreateNestedOneWithoutReferentielsInput
  }

  export type ReferentielCompetenceUncheckedCreateWithoutReferentielInput = {
    competenceId: number
  }

  export type ReferentielCompetenceCreateOrConnectWithoutReferentielInput = {
    where: ReferentielCompetenceWhereUniqueInput
    create: XOR<ReferentielCompetenceCreateWithoutReferentielInput, ReferentielCompetenceUncheckedCreateWithoutReferentielInput>
  }

  export type ReferentielCompetenceCreateManyReferentielInputEnvelope = {
    data: ReferentielCompetenceCreateManyReferentielInput | ReferentielCompetenceCreateManyReferentielInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReferentielInput = {
    username: string
    email: string
    password: string
    profile: ProfileCreateNestedOneWithoutUsersInput
    profilSortie?: ProfilSortieCreateNestedOneWithoutUsersInput
    promosFormateur?: PromoFormateursCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReferentielInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    profilSortieId?: number | null
    promosFormateur?: PromoFormateursUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReferentielInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferentielInput, UserUncheckedCreateWithoutReferentielInput>
  }

  export type UserCreateManyReferentielInputEnvelope = {
    data: UserCreateManyReferentielInput | UserCreateManyReferentielInput[]
    skipDuplicates?: boolean
  }

  export type PromoCreateWithoutReferentielInput = {
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    formateurs?: PromoFormateursCreateNestedManyWithoutPromoInput
  }

  export type PromoUncheckedCreateWithoutReferentielInput = {
    id?: number
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
    formateurs?: PromoFormateursUncheckedCreateNestedManyWithoutPromoInput
  }

  export type PromoCreateOrConnectWithoutReferentielInput = {
    where: PromoWhereUniqueInput
    create: XOR<PromoCreateWithoutReferentielInput, PromoUncheckedCreateWithoutReferentielInput>
  }

  export type PromoCreateManyReferentielInputEnvelope = {
    data: PromoCreateManyReferentielInput | PromoCreateManyReferentielInput[]
    skipDuplicates?: boolean
  }

  export type ReferentielCompetenceUpsertWithWhereUniqueWithoutReferentielInput = {
    where: ReferentielCompetenceWhereUniqueInput
    update: XOR<ReferentielCompetenceUpdateWithoutReferentielInput, ReferentielCompetenceUncheckedUpdateWithoutReferentielInput>
    create: XOR<ReferentielCompetenceCreateWithoutReferentielInput, ReferentielCompetenceUncheckedCreateWithoutReferentielInput>
  }

  export type ReferentielCompetenceUpdateWithWhereUniqueWithoutReferentielInput = {
    where: ReferentielCompetenceWhereUniqueInput
    data: XOR<ReferentielCompetenceUpdateWithoutReferentielInput, ReferentielCompetenceUncheckedUpdateWithoutReferentielInput>
  }

  export type ReferentielCompetenceUpdateManyWithWhereWithoutReferentielInput = {
    where: ReferentielCompetenceScalarWhereInput
    data: XOR<ReferentielCompetenceUpdateManyMutationInput, ReferentielCompetenceUncheckedUpdateManyWithoutReferentielInput>
  }

  export type UserUpsertWithWhereUniqueWithoutReferentielInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferentielInput, UserUncheckedUpdateWithoutReferentielInput>
    create: XOR<UserCreateWithoutReferentielInput, UserUncheckedCreateWithoutReferentielInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferentielInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferentielInput, UserUncheckedUpdateWithoutReferentielInput>
  }

  export type UserUpdateManyWithWhereWithoutReferentielInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferentielInput>
  }

  export type PromoUpsertWithWhereUniqueWithoutReferentielInput = {
    where: PromoWhereUniqueInput
    update: XOR<PromoUpdateWithoutReferentielInput, PromoUncheckedUpdateWithoutReferentielInput>
    create: XOR<PromoCreateWithoutReferentielInput, PromoUncheckedCreateWithoutReferentielInput>
  }

  export type PromoUpdateWithWhereUniqueWithoutReferentielInput = {
    where: PromoWhereUniqueInput
    data: XOR<PromoUpdateWithoutReferentielInput, PromoUncheckedUpdateWithoutReferentielInput>
  }

  export type PromoUpdateManyWithWhereWithoutReferentielInput = {
    where: PromoScalarWhereInput
    data: XOR<PromoUpdateManyMutationInput, PromoUncheckedUpdateManyWithoutReferentielInput>
  }

  export type PromoScalarWhereInput = {
    AND?: PromoScalarWhereInput | PromoScalarWhereInput[]
    OR?: PromoScalarWhereInput[]
    NOT?: PromoScalarWhereInput | PromoScalarWhereInput[]
    id?: IntFilter<"Promo"> | number
    nom?: StringFilter<"Promo"> | string
    dateDebut?: DateTimeFilter<"Promo"> | Date | string
    dateFin?: DateTimeFilter<"Promo"> | Date | string
    referentielId?: IntNullableFilter<"Promo"> | number | null
  }

  export type ReferentielCreateWithoutCompetencesInput = {
    nom: string
    description?: string | null
    users?: UserCreateNestedManyWithoutReferentielInput
    promos?: PromoCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielUncheckedCreateWithoutCompetencesInput = {
    id?: number
    nom: string
    description?: string | null
    users?: UserUncheckedCreateNestedManyWithoutReferentielInput
    promos?: PromoUncheckedCreateNestedManyWithoutReferentielInput
  }

  export type ReferentielCreateOrConnectWithoutCompetencesInput = {
    where: ReferentielWhereUniqueInput
    create: XOR<ReferentielCreateWithoutCompetencesInput, ReferentielUncheckedCreateWithoutCompetencesInput>
  }

  export type CompetenceCreateWithoutReferentielsInput = {
    nom: string
    description?: string | null
    niveaux?: CompetenceNiveauCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceUncheckedCreateWithoutReferentielsInput = {
    id?: number
    nom: string
    description?: string | null
    niveaux?: CompetenceNiveauUncheckedCreateNestedManyWithoutCompetenceInput
  }

  export type CompetenceCreateOrConnectWithoutReferentielsInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutReferentielsInput, CompetenceUncheckedCreateWithoutReferentielsInput>
  }

  export type ReferentielUpsertWithoutCompetencesInput = {
    update: XOR<ReferentielUpdateWithoutCompetencesInput, ReferentielUncheckedUpdateWithoutCompetencesInput>
    create: XOR<ReferentielCreateWithoutCompetencesInput, ReferentielUncheckedCreateWithoutCompetencesInput>
    where?: ReferentielWhereInput
  }

  export type ReferentielUpdateToOneWithWhereWithoutCompetencesInput = {
    where?: ReferentielWhereInput
    data: XOR<ReferentielUpdateWithoutCompetencesInput, ReferentielUncheckedUpdateWithoutCompetencesInput>
  }

  export type ReferentielUpdateWithoutCompetencesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutReferentielNestedInput
    promos?: PromoUpdateManyWithoutReferentielNestedInput
  }

  export type ReferentielUncheckedUpdateWithoutCompetencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutReferentielNestedInput
    promos?: PromoUncheckedUpdateManyWithoutReferentielNestedInput
  }

  export type CompetenceUpsertWithoutReferentielsInput = {
    update: XOR<CompetenceUpdateWithoutReferentielsInput, CompetenceUncheckedUpdateWithoutReferentielsInput>
    create: XOR<CompetenceCreateWithoutReferentielsInput, CompetenceUncheckedCreateWithoutReferentielsInput>
    where?: CompetenceWhereInput
  }

  export type CompetenceUpdateToOneWithWhereWithoutReferentielsInput = {
    where?: CompetenceWhereInput
    data: XOR<CompetenceUpdateWithoutReferentielsInput, CompetenceUncheckedUpdateWithoutReferentielsInput>
  }

  export type CompetenceUpdateWithoutReferentielsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: CompetenceNiveauUpdateManyWithoutCompetenceNestedInput
  }

  export type CompetenceUncheckedUpdateWithoutReferentielsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    niveaux?: CompetenceNiveauUncheckedUpdateManyWithoutCompetenceNestedInput
  }

  export type UserCreateManyProfileInput = {
    id?: number
    username: string
    email: string
    password: string
    profilSortieId?: number | null
    referentielId?: number | null
  }

  export type UserUpdateWithoutProfileInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilSortie?: ProfilSortieUpdateOneWithoutUsersNestedInput
    referentiel?: ReferentielUpdateOneWithoutUsersNestedInput
    promosFormateur?: PromoFormateursUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
    promosFormateur?: PromoFormateursUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateManyProfilSortieInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    referentielId?: number | null
  }

  export type UserUpdateWithoutProfilSortieInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    referentiel?: ReferentielUpdateOneWithoutUsersNestedInput
    promosFormateur?: PromoFormateursUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfilSortieInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
    promosFormateur?: PromoFormateursUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutProfilSortieInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    referentielId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromoFormateursCreateManyUserInput = {
    promoId: number
  }

  export type PromoFormateursUpdateWithoutUserInput = {
    promo?: PromoUpdateOneRequiredWithoutFormateursNestedInput
  }

  export type PromoFormateursUncheckedUpdateWithoutUserInput = {
    promoId?: IntFieldUpdateOperationsInput | number
  }

  export type PromoFormateursUncheckedUpdateManyWithoutUserInput = {
    promoId?: IntFieldUpdateOperationsInput | number
  }

  export type PromoFormateursCreateManyPromoInput = {
    userId: number
  }

  export type PromoFormateursUpdateWithoutPromoInput = {
    user?: UserUpdateOneRequiredWithoutPromosFormateurNestedInput
  }

  export type PromoFormateursUncheckedUpdateWithoutPromoInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PromoFormateursUncheckedUpdateManyWithoutPromoInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceNiveauCreateManyNiveauInput = {
    competenceId: number
  }

  export type CompetenceNiveauUpdateWithoutNiveauInput = {
    competence?: CompetenceUpdateOneRequiredWithoutNiveauxNestedInput
  }

  export type CompetenceNiveauUncheckedUpdateWithoutNiveauInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceNiveauUncheckedUpdateManyWithoutNiveauInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceNiveauCreateManyCompetenceInput = {
    niveauId: number
  }

  export type ReferentielCompetenceCreateManyCompetenceInput = {
    referentielId: number
  }

  export type CompetenceNiveauUpdateWithoutCompetenceInput = {
    niveau?: NiveauUpdateOneRequiredWithoutCompetencesNestedInput
  }

  export type CompetenceNiveauUncheckedUpdateWithoutCompetenceInput = {
    niveauId?: IntFieldUpdateOperationsInput | number
  }

  export type CompetenceNiveauUncheckedUpdateManyWithoutCompetenceInput = {
    niveauId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferentielCompetenceUpdateWithoutCompetenceInput = {
    referentiel?: ReferentielUpdateOneRequiredWithoutCompetencesNestedInput
  }

  export type ReferentielCompetenceUncheckedUpdateWithoutCompetenceInput = {
    referentielId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferentielCompetenceUncheckedUpdateManyWithoutCompetenceInput = {
    referentielId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferentielCompetenceCreateManyReferentielInput = {
    competenceId: number
  }

  export type UserCreateManyReferentielInput = {
    id?: number
    username: string
    email: string
    password: string
    profileId: number
    profilSortieId?: number | null
  }

  export type PromoCreateManyReferentielInput = {
    id?: number
    nom: string
    dateDebut: Date | string
    dateFin: Date | string
  }

  export type ReferentielCompetenceUpdateWithoutReferentielInput = {
    competence?: CompetenceUpdateOneRequiredWithoutReferentielsNestedInput
  }

  export type ReferentielCompetenceUncheckedUpdateWithoutReferentielInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferentielCompetenceUncheckedUpdateManyWithoutReferentielInput = {
    competenceId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutReferentielInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profile?: ProfileUpdateOneRequiredWithoutUsersNestedInput
    profilSortie?: ProfilSortieUpdateOneWithoutUsersNestedInput
    promosFormateur?: PromoFormateursUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReferentielInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
    promosFormateur?: PromoFormateursUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReferentielInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profileId?: IntFieldUpdateOperationsInput | number
    profilSortieId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PromoUpdateWithoutReferentielInput = {
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    formateurs?: PromoFormateursUpdateManyWithoutPromoNestedInput
  }

  export type PromoUncheckedUpdateWithoutReferentielInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    formateurs?: PromoFormateursUncheckedUpdateManyWithoutPromoNestedInput
  }

  export type PromoUncheckedUpdateManyWithoutReferentielInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}